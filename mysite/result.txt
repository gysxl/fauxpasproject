CONCERN1: Macro-based include guard [MacroBasedIncludeGuard]


         …tOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaMacro.h [10:8 - 10:20]

         #define SSofaMacro_h
                 
                 ~~~~~~~~~~~~
CONCERN1: Modifying the value of an argument variable [ArgumentModification]


         …/SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [94:8 - 94:54]
         (in: getPayConfigurationWithBillID:lastSelectedChannels:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [131:8 - 131:54]
         (in: updatePayConfigurationForBill:withSelectedChannels:coupon:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [174:8 - 174:54]
         (in: updatePayConfigurationForBill:withCouponID:whenNewChannelSelected:andCurrentSelectedChannels:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [213:8 - 213:54]
         (in: updatePayConfigurationForBill:withCurrentSelectedChannels:whenCouponChanged:fromCoupon:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [252:8 - 252:54]
         (in: getPaySDKConfigurationWithBillID:selectedChannel:couponID:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [353:8 - 353:54]
         (in: payByServerWithBillID:selectedChannels:couponID:completed:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …PayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [445:8 - 445:54]
         (in: confirmPayResultForBill:)

         orderID = [[self orderService] currentOrderID];
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaServices/SSofaCommentService.m [47:57 - 47:105]
         (in: fetchCommentTags:)

         commentTagsModel = [strongSelf p_cachedComments];
         
                 ~~~~~~~~~~~~
CONCERN1: Hardcoded self class reference [HardcodedSelfClass]


         …/SofaPlugin/SofaWebView/ONEUserStore+SSofaUserHelper.m [19:9 - 19:38]
         (in: sofa_loginWithNavigationController:completion:)

         if ([[ONEUserStore sharedInstance] isLogined]) {
              
                 ~~~~~~~~~~~~


         …/SofaPlugin/SofaWebView/ONEUserStore+SSofaUserHelper.m [29:5 - 29:34]
         (in: sofa_showLoginViewControllerInNavigationController:completion:)

         [[ONEUserStore sharedInstance] forceDoUserLog
          
                 ~~~~~~~~~~~~


         …ayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [378:12 - 378:73]
         (in: payByServerWithBillID:selectedChannels:couponID:completed:)

         [SSofaBizDataSource markNonPasswordPayFailedForOrder:orderID];
         
                 ~~~~~~~~~~~~


         …ayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [389:12 - 389:73]
         (in: payByServerWithBillID:selectedChannels:couponID:completed:)

         [SSofaBizDataSource markNonPasswordPayFailedForOrder:orderID];
         
                 ~~~~~~~~~~~~


         …ayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [780:8 - 780:102]
         (in: judgeWithholdOrder)

         [SSofaBizDataSource isFailedForNonPasswordPayWithOrderID:[[self orderS
         
                 ~~~~~~~~~~~~


         …Http/SofaModels/SofaBizModel/SSofaBizPassengerModel.m [24:33 - 24:63]
         (in: initWithPassengerModel:)

         gerModel *p = [[SSofaBizPassengerModel alloc] init];
                        
                 ~~~~~~~~~~~~


         …aPlugin/SofaStores/SofaConfigStore/SSofaConfigStore.m [64:23 - 64:47]
         (in: sharedInstance)

         configStore = [[SSofaConfigStore alloc] init_p];
                        
                 ~~~~~~~~~~~~


         …z/Sofa/SofaHost/SSofaHostDycProxy/SSofaHostDycProxy.m [22:12 - 22:37]
         (in: dycProxyWithClassName:)

         return [[SSofaHostDycProxy alloc] initWithTarget
                 
                 ~~~~~~~~~~~~


         …tBiz/Sofa/SofaPlugin/SofaServices/SSofaShareService.m [57:32 - 57:95]
         (in: shareChannelsWithAdvert:)

         rray addObject:[SSofaShareService dictionaryBetweenSofaAndTheOneShareC
                        
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaShareService.m [66:51 - 66:114]
         (in: shareSDKContentModelWithChannel:shareAdvert:)

         hareChannel =[ [SSofaShareService dictionaryBetweenTheOneAndSofaShareC
                        
                 ~~~~~~~~~~~~


         …One/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimer.m [27:31 - 27:49]
         (in: timeWithTimeInterval:target:selector:withObject:repeats:)

         timerBridge = [[SSofaTimer alloc] initWithTimeIn
                        
                 ~~~~~~~~~~~~


         …oductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimerBridge.m [31:36 - 31:60]
         (in: timerBridgeWithTimeInterval:target:selector:withObject:repeats:)

         *controller = [[SSofaTimerBridge alloc] init];
                        
                 ~~~~~~~~~~~~
CONCERN1: Null coalescing operator usage [NullCoalescingOp]


         …ctBiz/Sofa/SofaPlugin/SofaServices/SSofaADService.m [180:11 - 180:47]
         (in: p_adVersion)

         return model.version ? model.version : @(0);
                
                 ~~~~~~~~~~~~


         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [52:22 - 52:82]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         rams setObject:createOrder.estimatePrice ? createOrder.estimatePrice :
                        
                 ~~~~~~~~~~~~


         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [59:23 - 59:88]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         ams setObject:(createOrder.myDriverInfo.eta ? createOrder.myDriverInfo
                        
                 ~~~~~~~~~~~~


         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [60:23 - 60:90]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         ams setObject:(createOrder.sofaServerETA.eta ? createOrder.sofaServerE
                        
                 ~~~~~~~~~~~~


         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [146:22 - 146:38]
         (in: sendResponsibilityRequestWithOrderID:isInBackground:cancelEta:completion:)

         rams setObject:eta ? eta : @(0) forKey:@"cance
                        
                 ~~~~~~~~~~~~


         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [215:22 - 215:38]
         (in: sendFetchCommentTagsRequestWithVersion:completion:)

         rams setObject:ver ? ver : @(0) forKey:@"conf_
                        
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaServices/SSofaCommentService.m [161:20 - 161:79]
         (in: p_commentConfigurationVersion)

         SNumber *ver = commentModel.confVersion ?  commentModel.confVersion : 
                        
                 ~~~~~~~~~~~~


         …rderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [685:51 - 685:90]
         (in: _sofa_order_omgLogDidCreateOrderSuccessWithData:)

         OrderId" value:orderData.orderId?orderData.orderId:@""];
                        
                 ~~~~~~~~~~~~


         …ents/SMapLineCom/SSofaMapLineUnit/SSofaMapLineUnit.m [64:30 - 64:139]
         (in: bindBusinessAndLocationStore)

         g *acckeyStr = [ONEProductManager sharedInstance].currentAcckey ? [ONE
                        
                 ~~~~~~~~~~~~
CONCERN1: Old, verbose Objective-C syntax [OldVerboseObjCSyntax]


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …iz/Sofa/SofaPlugin/SofaUtils/NSArray+SSofaOperation.m [20:16 - 20:42]
         (in: sofa_safeObjectAtIndex:)

         id object = [self objectAtIndex:index];
                     
                 ~~~~~~~~~~~~


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [30:4 - 30:109]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.fromStopMode
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [31:4 - 31:109]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.fromStopMode
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [32:4 - 32:114]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.fromStopMode
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [33:4 - 33:111]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.fromStopMode
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [35:4 - 35:105]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.toStopModel.
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [36:4 - 36:105]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.toStopModel.
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [37:4 - 37:110]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.toStopModel.
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [38:4 - 38:107]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.toStopModel.
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [41:4 - 41:102]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.startSiteMod
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [42:4 - 42:102]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.startSiteMod
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [43:4 - 43:111]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.startSiteMod
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [45:4 - 45:98]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.endSiteModel
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [46:4 - 46:98]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.endSiteModel
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [47:4 - 47:107]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.endSiteModel
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [49:4 - 49:111]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.recommendSto
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [50:4 - 50:111]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.recommendSto
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [51:4 - 51:113]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.recommendSto
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [52:4 - 52:99]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:createOrder.estimatePrice ? createOrder.estimatePric
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [53:4 - 53:101]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.estimate.pri
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [55:4 - 55:94]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.activeId] fo
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [56:4 - 56:136]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:[[ONEDraftOrderStore sha
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [57:4 - 57:98]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.passengers] 
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [59:4 - 59:108]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:(createOrder.myDriverInfo.eta ? createOrder.myDriver
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [60:4 - 60:110]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:(createOrder.sofaServerETA.eta ? createOrder.sofaSer
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [63:8 - 63:116]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:[NSString sofa_notNilString:createOrder.estimate.gen
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [66:8 - 66:72]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:createOrder.selectedTPType forKey:@"tps_type"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [69:8 - 69:70]
         (in: sendCreateOrderRequestWithCreateOrderModel:completion:)

         [params setObject:createOrder.selectedTPETA forKey:@"tps_eta"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [106:4 - 106:60]
         (in: sendCancelOrderRequestWithOrderID:reasonType:orderState:cancelEta:isMatching:completion:)

         [params setObject:reasonType?:@"" forKey:@"cancel_type"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [107:4 - 107:49]
         (in: sendCancelOrderRequestWithOrderID:reasonType:orderState:cancelEta:isMatching:completion:)

         [params setObject:orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [108:4 - 108:54]
         (in: sendCancelOrderRequestWithOrderID:reasonType:orderState:cancelEta:isMatching:completion:)

         [params setObject:@(state) forKey:@"order_status"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [109:4 - 109:56]
         (in: sendCancelOrderRequestWithOrderID:reasonType:orderState:cancelEta:isMatching:completion:)

         [params setObject:@(cancelEta) forKey:@"cancel_eta"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [110:4 - 110:69]
         (in: sendCancelOrderRequestWithOrderID:reasonType:orderState:cancelEta:isMatching:completion:)

         [params setObject:isMatching ? @"1" : @"0" forKey:@"is_matching"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [126:4 - 126:49]
         (in: sendTripInfoRequestWithOrderID:isInBackground:completion:)

         [params setObject:orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [127:4 - 127:60]
         (in: sendTripInfoRequestWithOrderID:isInBackground:completion:)

         [params setObject:@(isInBackground) forKey:@"is_locked"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [144:4 - 144:49]
         (in: sendResponsibilityRequestWithOrderID:isInBackground:cancelEta:completion:)

         [params setObject:orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [145:4 - 145:60]
         (in: sendResponsibilityRequestWithOrderID:isInBackground:cancelEta:completion:)

         [params setObject:@(isInBackground) forKey:@"is_locked"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [146:4 - 146:60]
         (in: sendResponsibilityRequestWithOrderID:isInBackground:cancelEta:completion:)

         [params setObject:eta ? eta : @(0) forKey:@"cancel_eta"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [158:4 - 158:49]
         (in: sendOrderDetailRequestWithOrderID:isInBackground:completion:)

         [params setObject:orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [159:4 - 159:60]
         (in: sendOrderDetailRequestWithOrderID:isInBackground:completion:)

         [params setObject:@(isInBackground) forKey:@"is_locked"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [175:4 - 175:78]
         (in: sendPrepayRequestWithOrderID:reasonType:eta:isInBackground:completion:)

         [params setObject:[NSString sofa_notNilString:orderID] forKey:@"order_
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [176:4 - 176:60]
         (in: sendPrepayRequestWithOrderID:reasonType:eta:isInBackground:completion:)

         [params setObject:@(isInBackground) forKey:@"is_locked"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [177:4 - 177:50]
         (in: sendPrepayRequestWithOrderID:reasonType:eta:isInBackground:completion:)

         [params setObject:@(eta) forKey:@"cancel_eta"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [178:4 - 178:84]
         (in: sendPrepayRequestWithOrderID:reasonType:eta:isInBackground:completion:)

         [params setObject:[NSString sofa_notNilString:reasonType] forKey:@"can
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [195:4 - 195:63]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:kSSofaBussinessType forKey:@"businessid"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [196:4 - 196:86]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.startLat] forKey:@
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [197:4 - 197:86]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.startLng] forKey:@
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [198:4 - 198:82]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.endLat] forKey:@"e
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [199:4 - 199:82]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.endLng] forKey:@"e
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [200:4 - 200:98]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.startStopLat] forK
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [201:4 - 201:98]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.startStopLng] forK
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [202:4 - 202:94]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.endStopLat] forKey
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [203:4 - 203:94]
         (in: sendMapLineRequestWithModel:completion:)

         [params setObject:[NSString sofa_notNilString:model.endStopLng] forKey
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [214:4 - 214:63]
         (in: sendFetchCommentTagsRequestWithVersion:completion:)

         [params setObject:kSSofaBussinessType forKey:@"businessid"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [215:4 - 215:62]
         (in: sendFetchCommentTagsRequestWithVersion:completion:)

         [params setObject:ver ? ver : @(0) forKey:@"conf_version"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [235:4 - 235:49]
         (in: sendSubmitCommentTagsRequestWithOrderID:tripID:star:text:tagIDs:completion:)

         [params setObject:orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [236:4 - 236:47]
         (in: sendSubmitCommentTagsRequestWithOrderID:tripID:star:text:tagIDs:completion:)

         [params setObject:tripID forKey:@"trip_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [237:4 - 237:71]
         (in: sendSubmitCommentTagsRequestWithOrderID:tripID:star:text:tagIDs:completion:)

         [params setObject:[NSString sofa_notNilString:star] forKey:@"star"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [238:4 - 238:71]
         (in: sendSubmitCommentTagsRequestWithOrderID:tripID:star:text:tagIDs:completion:)

         [params setObject:[NSString sofa_notNilString:text] forKey:@"text"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [239:4 - 239:76]
         (in: sendSubmitCommentTagsRequestWithOrderID:tripID:star:text:tagIDs:completion:)

         [params setObject:[NSString sofa_notNilString:tagIds] forKey:@"tag_ids
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [252:4 - 252:89]
         (in: sendFetchAdRequestWithAreaID:orderID:version:completion:)

         [params setObject:[NSString sofa_notNilString:version.stringValue] for
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [253:4 - 253:55]
         (in: sendFetchAdRequestWithAreaID:orderID:version:completion:)

         [params setObject: areaID ?: @"" forKey:@"area_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [254:4 - 254:63]
         (in: sendFetchAdRequestWithAreaID:orderID:version:completion:)

         [params setObject:kSSofaBussinessType forKey:@"businessid"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [255:4 - 255:56]
         (in: sendFetchAdRequestWithAreaID:orderID:version:completion:)

         [params setObject:orderID ?: @"" forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [268:4 - 268:81]
         (in: sendFetchCouponsRequestWithFencelist:cityID:operation:completion:)

         [params setObject:[NSString sofa_notNilString:fencelist] forKey:@"fenc
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [269:4 - 269:75]
         (in: sendFetchCouponsRequestWithFencelist:cityID:operation:completion:)

         [params setObject:[NSString sofa_notNilString:cityID] forKey:@"cityid"
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [270:4 - 270:74]
         (in: sendFetchCouponsRequestWithFencelist:cityID:operation:completion:)

         [params setObject:[NSString sofa_notNilString:operation] forKey:@"op"]
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [286:4 - 286:81]
         (in: sendGeoGraphicalEnclosureRequestWithFencelist:cityID:location:operation:completion:)

         [params setObject:[NSString sofa_notNilString:fencelist] forKey:@"fenc
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [287:4 - 287:75]
         (in: sendGeoGraphicalEnclosureRequestWithFencelist:cityID:location:operation:completion:)

         [params setObject:[NSString sofa_notNilString:cityid] forKey:@"cityid"
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [288:4 - 288:74]
         (in: sendGeoGraphicalEnclosureRequestWithFencelist:cityID:location:operation:completion:)

         [params setObject:[NSString sofa_notNilString:operation] forKey:@"op"]
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [289:4 - 289:64]
         (in: sendGeoGraphicalEnclosureRequestWithFencelist:cityID:location:operation:completion:)

         [params setObject:@(location.latitude) forKey:@"needle_lat"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [290:4 - 290:65]
         (in: sendGeoGraphicalEnclosureRequestWithFencelist:cityID:location:operation:completion:)

         [params setObject:@(location.longitude) forKey:@"needle_lng"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [342:4 - 342:113]
         (in: sendWalkingDistanceRequestWithCurrentLocation:startSiteLocation:completion:)

         [params setObject:[NSString stringWithFormat:@"%lf", startSiteLocation
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [343:4 - 343:114]
         (in: sendWalkingDistanceRequestWithCurrentLocation:startSiteLocation:completion:)

         [params setObject:[NSString stringWithFormat:@"%lf", startSiteLocation
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [344:4 - 344:103]
         (in: sendWalkingDistanceRequestWithCurrentLocation:startSiteLocation:completion:)

         [params setObject:[NSString stringWithFormat:@"%lf", currentLocation.l
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [345:4 - 345:104]
         (in: sendWalkingDistanceRequestWithCurrentLocation:startSiteLocation:completion:)

         [params setObject:[NSString stringWithFormat:@"%lf", currentLocation.l
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …oductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [381:8 - 381:111]
         (in: sendQueryEstimatePriceRequestWithCreateOrderModel:passengerCount:completion:)

         [dataDic setObject:[NSString sofa_notNilString:model.estimate.genomeTr
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [415:4 - 415:50]
         (in: sendMyMapLineRequestWithOrderID:carLocation:completion:)

         [params setObject: orderID forKey:@"order_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [417:8 - 417:71]
         (in: sendMyMapLineRequestWithOrderID:carLocation:completion:)

         [params setObject:@(carLocation.latitude) forKey:@"driver_lat"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [418:8 - 418:72]
         (in: sendMyMapLineRequestWithOrderID:carLocation:completion:)

         [params setObject:@(carLocation.longitude) forKey:@"driver_lng"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [464:4 - 464:64]
         (in: sendCheckVoteInfoRequestWithAreaID:token:completion:)

         [params setObject: kSSofaBussinessType forKey:@"businessid"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [465:4 - 465:55]
         (in: sendCheckVoteInfoRequestWithAreaID:token:completion:)

         [params setObject: areaID ?: @"" forKey:@"area_id"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [468:8 - 468:48]
         (in: sendCheckVoteInfoRequestWithAreaID:token:completion:)

         [params setObject:token forKey:@"token"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [501:4 - 501:69]
         (in: sendFetchMISMessageRequestWithAID:completion:)

         [params setObject:[NSString sofa_notNilString:aid] forKey:@"aid"];
         
                 ~~~~~~~~~~~~


         -[NSMutableDictionary setObject:forKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaBaseAPI.m [35:31 - 35:103]
         (in: POSTWithPath:paramsDic:completion:)

         addParamValue: [[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaBaseAPI.m [52:49 - 52:121]
         (in: POSTWithPath:retryTimes:paramsDic:completion:)

         addParamValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"C
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …uctBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [78:20 - 78:51]
         (in: loadRequest)

         h5Url = [self.dataDic objectForKey:key];
                 
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …uctBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [80:41 - 80:72]
         (in: loadRequest)

         s safeSetValue:[self.dataDic objectForKey:key] forKey:key];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …tBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [175:27 - 175:93]
         (in: webView:didFailLoadWithError:)

         *requestUrl = [[error userInfo] objectForKey:NSURLErrorFailingURLStrin
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faWebView/ExceptionsPage/SSofaBaseWebViewController.m [43:53 - 43:91]
         (in: viewDidLoad)

         thFormat:@"%@",[self.params objectForKey:@"fence_id"]];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …om/SSofaEstimateUnit/SSofaBizDataSource+SEstimate.m [103:39 - 103:89]
         (in: toH5Exception:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …om/SSofaEvaluateUnit/SSofaBizDataSource+SEvaluate.m [162:36 - 162:91]
         (in: _sofa_eva_EvaluateContainer:)

         ary *tagInfo = [commentTagsModel.tags objectForKey:[@(n) stringValue]]
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [63:36 - 63:69]
         (in: paramsSender:)

         = (NSString *)[params objectForKey:@"couponID"];
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …z/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [39:47 - 39:97]
         (in: setupParams)

         appversion"   :[paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …z/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [40:47 - 40:95]
         (in: setupParams)

         datatype"     :[paraStore.publicParas objectForKey:@"datatype"] ?: @""
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …z/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [41:47 - 41:91]
         (in: setupParams)

         imei"         :[paraStore.publicParas objectForKey:@"imei"] ?:@"",
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [42:80 - 42:123]
         (in: setupParams)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [43:80 - 43:123]
         (in: setupParams)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [95:80 - 95:125]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …z/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [99:47 - 99:97]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         appversion"   :[paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [100:47 - 100:95]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         datatype"     :[paraStore.publicParas objectForKey:@"datatype"] ?: @""
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [101:47 - 101:91]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         imei"         :[paraStore.publicParas objectForKey:@"imei"] ?:@"",
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [102:80 - 102:123]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [103:80 - 103:123]
         (in: setupParamsWithFenceID:startPointCoordinate:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [155:47 - 155:97]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         appversion"   :[paraStore.publicParas objectForKey:@"appversion"] ?: @
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [156:47 - 156:95]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         datatype"     :[paraStore.publicParas objectForKey:@"datatype"] ?: @""
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [157:47 - 157:91]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         imei"         :[paraStore.publicParas objectForKey:@"imei"] ?: @"",
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [158:80 - 158:123]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [159:80 - 159:123]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [161:47 - 161:119]
         (in: setupParamsWithAreaID:areaName:vote:startPointCoordinate:)

         versioncode"  :[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [191:47 - 191:97]
         (in: setupParams:)

         appversion"   :[paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [192:47 - 192:95]
         (in: setupParams:)

         datatype"     :[paraStore.publicParas objectForKey:@"datatype"] ?: @""
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [193:47 - 193:91]
         (in: setupParams:)

         imei"         :[paraStore.publicParas objectForKey:@"imei"] ?:@"",
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [194:80 - 194:123]
         (in: setupParams:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m [195:80 - 195:123]
         (in: setupParams:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [87:59 - 87:104]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [88:59 - 88:109]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"appVersion"]] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [90:59 - 90:105]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]] forKey:
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lOrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [91:26 - 91:98]
         (in: webViewParametersWithOrder:)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [92:59 - 92:103]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"imei"]] forKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [94:59 - 94:107]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"datatype"]] forKe
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [96:59 - 96:102]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …OrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m [97:59 - 97:102]
         (in: webViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [107:59 - 107:104]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [108:59 - 108:109]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"appVersion"]] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [110:59 - 110:105]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]] forKey:
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …elTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [111:26 - 111:98]
         (in: p_cancelWebViewParametersWithOrder:)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [112:59 - 112:103]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"imei"]] forKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [114:59 - 114:107]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"datatype"]] forKe
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [116:59 - 116:102]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [117:59 - 117:102]
         (in: p_cancelWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [334:59 - 334:104]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [335:59 - 335:109]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"appVersion"]] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [337:59 - 337:105]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]] forKey:
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …elTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [338:26 - 338:98]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [339:59 - 339:103]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"imei"]] forKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [341:59 - 341:107]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"datatype"]] forKe
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [343:59 - 343:102]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m [344:59 - 344:102]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …lugin/SofaStores/SofaConfigStore/SSofaConfigStore.m [142:49 - 142:71]
         (in: isDuringOperationTime)

         meModel *obj = [days objectAtIndex:i];
                        
                 ~~~~~~~~~~~~


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …lugin/SofaStores/SofaConfigStore/SSofaConfigStore.m [172:29 - 172:83]
         (in: sortedNumberOfSeatsArray)

         Arry addObject:[self.configModel.selectPeopleNumber objectForKey:key]]
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [334:48 - 334:98]
         (in: _sofa_order_showReservationOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [362:48 - 362:98]
         (in: _sofa_order_showNormalOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [716:29 - 716:56]
         (in: _sofa_order_orderIdWithError:)

         NSDictionary *)[data objectForKey:@"data"] objectForKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [789:44 - 789:94]
         (in: _loadModifyPriceH5WithCallBack:)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …erCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [1169:43 - 1169:93]
         (in: toH5Exception:extraParameters:block:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …erCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [1177:43 - 1177:93]
         (in: toH5Exception:extraParameters:block:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …erCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m [1235:39 - 1235:89]
         (in: theStationNearDistance)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …erCarInfoCardCom/Units/SSofa/SSofaDriverInfoView.m [176:41 - 176:131]
         (in: initWithFrame:withProductId:)

         mationImages = [NSArray arrayWithObjects:loading1, loading0, loading2,
                        
                 ~~~~~~~~~~~~


         +[NSArray arrayWithObjects:] is called. Consider using an Objective-C
         container literal expression instead.
         
         NOTE: there is a crucial difference between the current
         implementation and the suggestion here: While a nil value for any of
         the given values to this method will only terminate the argument
         list, a nil value in the literal container expression will result in
         a runtime exception.

         …SEstimateCom/SSofaEstimateUnit/SSofaEstimateUnit.m [689:53 - 689:103]
         (in: _sofa_estimate_showDetailPrice:estimatedTPModel:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faWebView/ExceptionsPage/SSofaH5WebViewController.m [118:51 - 118:96]
         (in: loadBridgeAndHandler)

         if ([strongSelf.dataDic objectForKey:@"guide_id"]) {
             
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …aWebView/ExceptionsPage/SSofaH5WebViewController.m [119:60 - 119:105]
         (in: loadBridgeAndHandler)

         switch ([[strongSelf.dataDic objectForKey:@"guide_id"] integerValue])
                  
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faWebView/ExceptionsPage/SSofaH5WebViewController.m [148:43 - 148:88]
         (in: loadBridgeAndHandler)

         if ([strongSelf.dataDic objectForKey:@"guide_id"]) {
             
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faWebView/ExceptionsPage/SSofaH5WebViewController.m [150:52 - 150:97]
         (in: loadBridgeAndHandler)

         switch ([[strongSelf.dataDic objectForKey:@"guide_id"] integerValue])
                  
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faWebView/ExceptionsPage/SSofaH5WebViewController.m [184:51 - 184:96]
         (in: loadBridgeAndHandler)

         if ([strongSelf.dataDic objectForKey:@"guide_id"]) {
             
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …aWebView/ExceptionsPage/SSofaH5WebViewController.m [186:60 - 186:105]
         (in: loadBridgeAndHandler)

         switch ([[strongSelf.dataDic objectForKey:@"guide_id"] integerValue])
                  
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …WebView/ExceptionsPage/SSofaH5WebViewController.m [202:171 - 202:196]
         (in: loadBridgeAndHandler)

         hFormat:@"%@", [dic objectForKey:@"url"]]
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …omeAwareCom/SSofaHomeAwareUnit/SSofaHomeAwareUnit.m [145:18 - 145:46]
         (in: showActivitiePage:)

         if (params && [params objectForKey:@"url"]) {
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …eAwareCom/SSofaHomeAwareUnit/SSofaHomeAwareUnit.m [146:110 - 146:138]
         (in: showActivitiePage:)

         hDefaultParams:[params objectForKey:@"url"]];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [81:61 - 81:93]
         (in: business:canOpenURL:info:)

         emaPrefixArray:[NSArray arrayWithObject:schema] parseResult:^(
                        
                 ~~~~~~~~~~~~


         +[NSArray arrayWithObject:] is called. Consider using an Objective-C
         container literal expression instead.

         …ofa/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [88:24 - 88:50]
         (in: business:canOpenURL:info:)

         SString *pid = [segments objectAtIndex:0];//productid
                        
                 ~~~~~~~~~~~~


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …a/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [110:65 - 110:97]
         (in: business:openURL:info:)

         emaPrefixArray:[NSArray arrayWithObject:schema] parseResult:^(
                        
                 ~~~~~~~~~~~~


         +[NSArray arrayWithObject:] is called. Consider using an Objective-C
         container literal expression instead.

         …a/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [116:36 - 116:62]
         (in: business:openURL:info:)

         *moduleName = [[segments objectAtIndex:1] lowercaseStrin
                        
                 ~~~~~~~~~~~~


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …ofa/SofaPlugin/SofaServices/SSofaLocationService.m [206:68 - 206:118]
         (in: configDidChange)

         containsObject:[NSNumber numberWithInteger:[cityId integerValue]]]) {
                        
                 ~~~~~~~~~~~~


         +[NSNumber numberWithInteger:] is called. Consider using Objective-C
         literal notation (or a boxed expression) instead.

         …/Sofa/SofaPlugin/SofaServices/SSofaMessageService.m [806:45 - 806:76]
         (in: p_findMisHomeMessageWithModel:)

         messageModel = [model.message objectAtIndex:i];
                        
                 ~~~~~~~~~~~~


         -[NSArray objectAtIndex:] is called. Consider using an Objective-C
         subscript expression instead.

         …ew/ExceptionsPage/SSofaNavigationWebViewController.m [91:56 - 91:101]
         (in: submitCancelReasonWithData:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …w/ExceptionsPage/SSofaNavigationWebViewController.m [119:20 - 119:53]
         (in: baseUrl)

         h5Url = [self.detailDic objectForKey:key];
                 
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …w/ExceptionsPage/SSofaNavigationWebViewController.m [121:41 - 121:74]
         (in: baseUrl)

         s safeSetValue:[self.detailDic objectForKey:key] forKey:key];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [131:63 - 131:108]
         (in: sofa_helpOrderModel)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [133:26 - 133:76]
         (in: sofa_helpOrderModel)

         raDic setValue:[paraStore.publicParas objectForKey:@"appversion"] ?: @
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [134:26 - 134:81]
         (in: sofa_helpOrderModel)

         raDic setValue:[paraStore.publicParas objectForKey:@"datatype" ?: @""]
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [135:26 - 135:77]
         (in: sofa_helpOrderModel)

         raDic setValue:[paraStore.publicParas objectForKey:@"imei" ?: @""] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [136:63 - 136:106]
         (in: sofa_helpOrderModel)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [137:63 - 137:106]
         (in: sofa_helpOrderModel)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m [138:30 - 138:102]
         (in: sofa_helpOrderModel)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderRecoveCom/SSofaOrderRecUnit/SSofaOrderRecUnit.m [523:48 - 523:98]
         (in: p_showReservationOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …rderRecoveCom/SSofaOrderRecUnit/SSofaOrderRecUnit.m [549:48 - 549:98]
         (in: p_showNormalOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …z/Sofa/SofaPlugin/SofaServices/SSofaOrderService.m [212:86 - 212:122]
         (in: createOrderWithModel:completion:)

         ng *orderId = [[response.data objectForKey:@"data"] objectForKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …omponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [420:48 - 420:98]
         (in: _sofa_order_showNormalOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …omponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [447:48 - 447:98]
         (in: _sofa_order_showReservationOrderTimeOutH5)

         @"appversion":[paraStore.publicParas objectForKey:@"appversion"] ?: @"
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [477:59 - 477:104]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [478:59 - 478:109]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"appVersion"]] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [480:59 - 480:105]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]] forKey:
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …omponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [481:26 - 481:98]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [482:59 - 482:103]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"imei"]] forKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [484:59 - 484:107]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"datatype"]] forKe
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [486:59 - 486:102]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [487:59 - 487:102]
         (in: p_passengerLateWebViewParametersWithTripInfo:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [538:59 - 538:104]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]] forKey:@
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [539:59 - 539:109]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"appVersion"]] for
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [541:59 - 541:105]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]] forKey:
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …omponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [542:26 - 542:98]
         (in: p_immunityWebViewParametersWithOrder:)

         c safeSetValue:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [543:59 - 543:103]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"imei"]] forKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [545:59 - 545:107]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"datatype"]] forKe
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [547:59 - 547:102]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lat"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [548:59 - 548:102]
         (in: p_immunityWebViewParametersWithOrder:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"lng"]] forKey:@"l
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [591:77 - 591:123]
         (in: routerCancelReasonWebViewController)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"osType"]],
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …mponents/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [593:49 - 593:121]
         (in: routerCancelReasonWebViewController)

         "versioncode" :[[[NSBundle mainBundle] infoDictionary] objectForKey:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SPayBillCom/Unit/SSofaPayBillUnit/SSofaPayBillUnit.m [65:35 - 65:85]
         (in: tapActItem:)

         appversion"   :[paraStore.publicParas objectForKey:@"appversion"] ?: @
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SPayBillCom/Unit/SSofaPayBillUnit/SSofaPayBillUnit.m [84:36 - 84:86]
         (in: tapActItem:)

         ppversion"   : [paraStore.publicParas objectForKey:@"appversion"] ?: @
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [64:8 - 64:37]
         (in: _sofa_QrCodeEnter:)

         if ([params objectForKey:@"flat"]) {
             
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [66:25 - 66:54]
         (in: _sofa_QrCodeEnter:)

         omeModel.lat = [params objectForKey:@"flat"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [67:25 - 67:54]
         (in: _sofa_QrCodeEnter:)

         omeModel.lng = [params objectForKey:@"flng"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [68:33 - 68:63]
         (in: _sofa_QrCodeEnter:)

         .displayname = [params objectForKey:@"fname"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [72:8 - 72:37]
         (in: _sofa_QrCodeEnter:)

         if ([params objectForKey:@"tlat"]) {
             
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [75:22 - 75:51]
         (in: _sofa_QrCodeEnter:)

         toModel.lat = [params objectForKey:@"tlat"];
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [76:22 - 76:51]
         (in: _sofa_QrCodeEnter:)

         toModel.lng = [params objectForKey:@"tlng"];
                       
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [77:30 - 77:60]
         (in: _sofa_QrCodeEnter:)

         .displayname = [params objectForKey:@"tname"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …osMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [194:40 - 194:69]
         (in: checkStartPosFromOthterBiz:)

         del.activeId = [dataDic objectForKey:@"cid"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …osMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [202:23 - 202:56]
         (in: checkStartPosFromOthterBiz:)

         e if(dataDic&&[[dataDic objectForKey:@"refresh"] isEqualToStrin
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …MarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [548:125 - 548:156]
         (in: _sofa_pMarker_inFenceRequestWithModel:from:isOtherBiz:isManualSelect:callBack:)

         responseData = [userInfo objectForKey:@"data"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …MarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [550:149 - 550:194]
         (in: _sofa_pMarker_inFenceRequestWithModel:from:isOtherBiz:isManualSelect:callBack:)

         thFormat:@"%@",[responseData objectForKey:@"pre_open_fence"]] ;
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …sMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m [858:53 - 858:103]
         (in: toH5Exception:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [84:22 - 84:67]
         (in: sideOrderStatus)

         order_status = [self.extraInfo objectForKey:@"order_status"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [92:22 - 92:67]
         (in: sidePayedStatus)

         payed_status = [self.extraInfo objectForKey:@"payed_status"];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [153:14 - 153:49]
         (in: recOrderType)

         [[self.extra objectForKey:@"status"] integerValue]
          
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [157:14 - 157:49]
         (in: recOrderType)

         }else if([[self.extra objectForKey:@"status"] integerValue]
                   
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …p/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m [664:39 - 664:89]
         (in: theStationNearDistance:)

         @"appversion": [paraStore.publicParas objectForKey:@"appversion"] ?:@"
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …faMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [81:32 - 81:70]
         (in: firstCircleAnimatiom)

         im.fromValue = [NSNumber numberWithFloat:BEGIN_ALPHA];
                        
                 ~~~~~~~~~~~~


         +[NSNumber numberWithFloat:] is called. Consider using Objective-C
         literal notation (or a boxed expression) instead.

         …faMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [82:30 - 82:66]
         (in: firstCircleAnimatiom)

         Anim.toValue = [NSNumber numberWithFloat:END_ALPHA];
                        
                 ~~~~~~~~~~~~


         +[NSNumber numberWithFloat:] is called. Consider using Objective-C
         literal notation (or a boxed expression) instead.

         …Map/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [107:38 - 107:76]
         (in: secondCircleAnimatiom)

         im.fromValue = [NSNumber numberWithFloat:BEGIN_ALPHA];
                        
                 ~~~~~~~~~~~~


         +[NSNumber numberWithFloat:] is called. Consider using Objective-C
         literal notation (or a boxed expression) instead.

         …Map/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [108:36 - 108:72]
         (in: secondCircleAnimatiom)

         Anim.toValue = [NSNumber numberWithFloat:END_ALPHA];
                        
                 ~~~~~~~~~~~~


         +[NSNumber numberWithFloat:] is called. Consider using Objective-C
         literal notation (or a boxed expression) instead.

         …/SofaPlugin/SofaWebView/ExceptionsPage/SSofaWebView.m [44:53 - 44:92]
         (in: loadBridgeAndHandler)

         thFormat:@"%@",[self.dataDic objectForKey:@"fence_id"]];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …ofaPlugin/SofaWebView/ExceptionsPage/SSofaWebView.m [66:110 - 66:139]
         (in: loadBridgeAndHandler)

         thFormat:@"%@",[dataDic objectForKey:@"url"]]};
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.m [145:75 - 145:120]
         (in: registerIsSofaLoginJSHandlerToBridge:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]];
                        
                 ~~~~~~~~~~~~


         -[NSDictionary objectForKey:] is called. Consider using an
         Objective-C subscript expression instead.

         …SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.m [174:113 - 174:158]
         (in: registerSofaLoginJSHandlerToBridge:)

         thFormat:@"%@",[paraStore.publicParas objectForKey:@"token"]];
                        
                 ~~~~~~~~~~~~
CONCERN1: Non-copying property of immutable NSCopying type [RetainingImmutableProperty]


         The additionalArray property is declared with strong semantics. This
         should be copy instead.

         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [20:0 - 20:57]
         (in: SSofaCheckPointModel)

         @property (nonatomic, strong)  NSString <Optional>*status;
         
                 ~~~~~~~~~~~~


         The status property is declared with strong semantics. This should be
         copy instead.

         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [161:0 - 161:53]
         (in: SSofaConfigModel)

         @property (nonatomic, strong) NSArray *afterPayAction;//支付完成后，弹出评价和运
         
                 ~~~~~~~~~~~~


         The afterPayAction property is declared with strong semantics. This
         should be copy instead.

         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [205:0 - 205:48]
         (in: SSofaEstimatedTPModel)

         @property (nonatomic, strong) NSString *priceTip;//价格文案展示
         
                 ~~~~~~~~~~~~


         The priceTip property is declared with strong semantics. This should
         be copy instead.

         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [221:0 - 221:48]
         (in: SSofaEstimatePriceModel)

         @property (nonatomic, strong) NSString *priceTip;//价格文案展示
         
                 ~~~~~~~~~~~~


         The priceTip property is declared with strong semantics. This should
         be copy instead.

         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [292:0 - 292:53]
         (in: SSofaOrderRecoverModel)

         @property (nonatomic, strong) NSString<Optional> *msg;
         
                 ~~~~~~~~~~~~
CONCERN1: Setter invocation in init or dealloc method [SetterInvocationInInitOrDealloc]


         …ductBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [34:8 - 34:32]
         (in: initWithFrame:params:)

         self.dataDic = paramsDic;
         
                 ~~~~~~~~~~~~


         …/SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [54:8 - 54:51]
         (in: init)

         self.jsBridgeHandler = kSPayJSBridgeKeySofa;
         
                 ~~~~~~~~~~~~


         …hooseSeatCom/SSofaChooseSeatUnit/SSofaChooseSeatUnit.m [30:8 - 30:88]
         (in: initWithDataSource:config:)

         self.dataArray = [[self.sofaDataSource accountService] sortedNumberOfS
         
                 ~~~~~~~~~~~~


         …hooseSeatCom/SSofaChooseSeatUnit/SSofaChooseSeatUnit.m [31:8 - 31:92]
         (in: initWithDataSource:config:)

         self.valueArry = [self.sofaDataSource accountService].configModel.sele
         
                 ~~~~~~~~~~~~


         …/SofaWebView/ExceptionsPage/SSofaH5WebViewController.m [45:8 - 45:32]
         (in: initWithParams:)

         self.dataDic = paramsDic;
         
                 ~~~~~~~~~~~~


         …/SofaWebView/ExceptionsPage/SSofaH5WebViewController.m [46:8 - 46:50]
         (in: initWithParams:)

         self.h5ClickSubject = [RACSubject subject];
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaHost/SSofaHostDycProxy/SSofaHostDycProxy.m [26:4 - 26:38]
         (in: initWithTargetClsName:)

         self.targetClsName = targetClsName; return self;
         
                 ~~~~~~~~~~~~


         …View/ExceptionsPage/SSofaNavigationWebViewController.m [37:8 - 37:32]
         (in: initWithParams:title:)

         self.detailDic = dataDic;
         
                 ~~~~~~~~~~~~


         …View/ExceptionsPage/SSofaNavigationWebViewController.m [38:8 - 38:32]
         (in: initWithParams:title:)

         self.customTitle = title;
         
                 ~~~~~~~~~~~~


         …View/ExceptionsPage/SSofaNavigationWebViewController.m [39:8 - 39:50]
         (in: initWithParams:title:)

         self.h5ClickSubject = [RACSubject subject];
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [76:8 - 76:59]
         (in: initWithHistoryOrderMsg:)

         self.orderId = [self getOrderId:historymsg.orderId];
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [77:8 - 77:45]
         (in: initWithHistoryOrderMsg:)

         self.extraInfo = historymsg.extraInfo;
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [131:8 - 131:58]
         (in: initWithOrderRecModel:)

         self.orderId = [self getOrderId:orderRecModel.oid];
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [132:8 - 132:38]
         (in: initWithOrderRecModel:)

         self.type = orderRecModel.type;
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [133:8 - 133:40]
         (in: initWithOrderRecModel:)

         self.extra = orderRecModel.extra;
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [134:8 - 134:40]
         (in: initWithOrderRecModel:)

         self.message = orderRecModel.msg;
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [241:12 - 241:41]
         (in: initWithCommentTagInfo:)

         self.driver = info[@"driver"];
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [244:12 - 244:45]
         (in: initWithCommentTagInfo:)

         self.platform = info[@"platform"];
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [246:8 - 246:35]
         (in: initWithCommentTagInfo:)

         self.level = info[@"level"];
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m [247:8 - 247:33]
         (in: initWithCommentTagInfo:)

         self.text = info[@"text"];
         
                 ~~~~~~~~~~~~


         …ugin/SofaMap/SSofaStopAnnotation/SSofaStopAnnotation.m [22:8 - 22:48]
         (in: initWithBusiness:)

         self.stationView = [[UIView alloc] init];
         
                 ~~~~~~~~~~~~


         …aMap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m [57:8 - 57:29]
         (in: initWithMapEntrance:sofaDataSource:)

         self.sofaBiz = source;
         
                 ~~~~~~~~~~~~


         …One/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimer.m [34:8 - 34:147]
         (in: initWithTimeInterval:target:selector:withObject:repeats:)

         self.timerBridge = [SSofaTimerBridge timerBridgeWithTimeInterval:inter
         
                 ~~~~~~~~~~~~
CONCERN1: Unprefixed Objective-C class [UnprefixedClass]


         …oductBiz/Sofa/SofaPlugin/SofaServices/SSofaADService.h [17:0 - 17:36]

         @interface SSofaADService : NSObject
         
                 ~~~~~~~~~~~~


         …oductBiz/Sofa/SofaPlugin/SofaServices/SSofaADService.h [17:0 - 17:36]

         @interface SSofaADService : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaAccountService.h [19:0 - 19:41]

         @interface SSofaAccountService : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaAccountService.h [19:0 - 19:41]

         @interface SSofaAccountService : NSObject
         
                 ~~~~~~~~~~~~


         …Com/unit/SSofaActiveBoardsUnit/SSofaActiveBoardsUnit.h [12:0 - 12:51]

         @interface SSofaActiveBoardsUnit : SActiveBoardsCom
         
                 ~~~~~~~~~~~~


         …Com/unit/SSofaActiveBoardsUnit/SSofaActiveBoardsUnit.h [12:0 - 12:51]

         @interface SSofaActiveBoardsUnit : SActiveBoardsCom
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaCommon/SSofaAnalyticsManager.h [18:0 - 18:43]

         @interface SSofaAnalyticsManager : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaCommon/SSofaAnalyticsManager.h [18:0 - 18:43]

         @interface SSofaAnalyticsManager : NSObject
         
                 ~~~~~~~~~~~~


         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.h [24:0 - 24:37]

         @interface SSofaApiManager : NSObject
         
                 ~~~~~~~~~~~~


         …/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.h [24:0 - 24:37]

         @interface SSofaApiManager : NSObject
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaBaseAPI.h [11:0 - 11:39]

         @interface SSofaBaseAPI : ONERequestAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaBaseAPI.h [11:0 - 11:39]

         @interface SSofaBaseAPI : ONERequestAPI
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaBaseModel.h [11:0 - 11:37]

         @interface SSofaBaseModel : JSONModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaBaseModel.h [11:0 - 11:37]

         @interface SSofaBaseModel : JSONModel
         
                 ~~~~~~~~~~~~


         …ProductBiz/Sofa/SofaPlugin/SofaStores/SSofaBaseStore.h [15:0 - 15:36]

         @interface SSofaBaseStore : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.h [14:0 - 14:43]

         @interface SSofaBaseWebView : TRBaseWebView
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.h [14:0 - 14:43]

         @interface SSofaBaseWebView : TRBaseWebView
         
                 ~~~~~~~~~~~~


         …ofaWebView/ExceptionsPage/SSofaBaseWebViewController.h [13:0 - 13:63]

         @interface SSofaBaseWebViewController : TRBaseWebViewController
         
                 ~~~~~~~~~~~~


         …ofaWebView/ExceptionsPage/SSofaBaseWebViewController.h [13:0 - 13:63]

         @interface SSofaBaseWebViewController : TRBaseWebViewController
         
                 ~~~~~~~~~~~~


         …ttp/SofaModels/SofaBizModel/SSofaBizCreateOrderModel.h [20:0 - 20:46]

         @interface SSofaBizCreateOrderModel : NSObject
         
                 ~~~~~~~~~~~~


         …ttp/SofaModels/SofaBizModel/SSofaBizCreateOrderModel.h [20:0 - 20:46]

         @interface SSofaBizCreateOrderModel : NSObject
         
                 ~~~~~~~~~~~~


         …/SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [44:0 - 44:96]

         @interface SSofaCouponBridgeConfiguration : NSObject<SPayJSBridgeProto
         
                 ~~~~~~~~~~~~


         …extOne/ProductBiz/Sofa/SofaPlugin/SSofaBizDataSource.h [29:0 - 29:41]

         @interface SSofaBizDataSource : SBizStore
         
                 ~~~~~~~~~~~~


         …extOne/ProductBiz/Sofa/SofaPlugin/SSofaBizDataSource.h [29:0 - 29:41]

         @interface SSofaBizDataSource : SBizStore
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaDycMix/SSofaBizDelegateDycMix.h [11:0 - 11:75]

         @interface SSofaBizDelegateDycMix : NSObject <SSofaHostBizDelegateProt
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaDycMix/SSofaBizDelegateDycMix.h [11:0 - 11:75]

         @interface SSofaBizDelegateDycMix : NSObject <SSofaHostBizDelegateProt
         
                 ~~~~~~~~~~~~


         …aHttp/SofaModels/SofaBizModel/SSofaBizPassengerModel.h [15:0 - 15:44]

         @interface SSofaBizPassengerModel : NSObject
         
                 ~~~~~~~~~~~~


         …e/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaBubbleView.h [26:0 - 26:35]

         @interface SSofaBubbleView : UIView
         
                 ~~~~~~~~~~~~


         …e/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaBubbleView.h [26:0 - 26:35]

         @interface SSofaBubbleView : UIView
         
                 ~~~~~~~~~~~~


         …SofaBubbleWaitResponeUnit/SSofaBubbleWaitResponeUnit.h [12:0 - 12:61]

         @interface SSofaBubbleWaitResponeUnit : SBubbleWaitResponeCom
         
                 ~~~~~~~~~~~~


         …SofaBubbleWaitResponeUnit/SSofaBubbleWaitResponeUnit.h [12:0 - 12:61]

         @interface SSofaBubbleWaitResponeUnit : SBubbleWaitResponeCom
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [16:0 - 16:51]

         @interface SSofaShowUserGuideWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [16:0 - 16:51]

         @interface SSofaShowUserGuideWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [23:0 - 23:48]

         @interface SSofaOpenCityAdWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [23:0 - 23:48]

         @interface SSofaOpenCityAdWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [31:0 - 31:43]

         @interface SSofaErrorWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [31:0 - 31:43]

         @interface SSofaErrorWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [38:0 - 38:52]

         @interface SSofaPreheatingZoneWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [38:0 - 38:52]

         @interface SSofaPreheatingZoneWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [46:0 - 46:42]

         @interface SSofaVoteWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [46:0 - 46:42]

         @interface SSofaVoteWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [56:0 - 56:52]

         @interface SSofaActivitiesPageWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.h [56:0 - 56:52]

         @interface SSofaActivitiesPageWebView : SSofaWebView
         
                 ~~~~~~~~~~~~


         …ButtonCom/unit/SSofaActiveBoardsUnit/SSofaButtonConf.h [13:0 - 13:40]

         @interface SSofaButtonConf : SButtonConf
         
                 ~~~~~~~~~~~~


         …ButtonCom/unit/SSofaActiveBoardsUnit/SSofaButtonConf.h [13:0 - 13:40]

         @interface SSofaButtonConf : SButtonConf
         
                 ~~~~~~~~~~~~


         …elOrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.h [12:0 - 12:49]

         @interface SSofaCancelOrderUnit : SCancelOrderCom
         
                 ~~~~~~~~~~~~


         …elOrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.h [12:0 - 12:49]

         @interface SSofaCancelOrderUnit : SCancelOrderCom
         
                 ~~~~~~~~~~~~


         …ancelTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.h [12:0 - 12:47]

         @interface SSofaCancelTripUnit : SCancelTripCom
         
                 ~~~~~~~~~~~~


         …ancelTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.h [12:0 - 12:47]

         @interface SSofaCancelTripUnit : SCancelTripCom
         
                 ~~~~~~~~~~~~


         …onents/SCarpoolCom/SSofaCarpoolUnit/SSofaCarpoolUnit.h [12:0 - 12:41]

         @interface SSofaCarpoolUnit : SCarpoolCom
         
                 ~~~~~~~~~~~~


         …onents/SCarpoolCom/SSofaCarpoolUnit/SSofaCarpoolUnit.h [12:0 - 12:41]

         @interface SSofaCarpoolUnit : SCarpoolCom
         
                 ~~~~~~~~~~~~


         …hooseSeatCom/SSofaChooseSeatUnit/SSofaChooseSeatUnit.h [13:0 - 13:72]

         @interface SSofaChooseSeatUnit : SChooseSeatCom <SFormCellModelDelegat
         
                 ~~~~~~~~~~~~


         …hooseSeatCom/SSofaChooseSeatUnit/SSofaChooseSeatUnit.h [13:0 - 13:72]

         @interface SSofaChooseSeatUnit : SChooseSeatCom <SFormCellModelDelegat
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaCommentService.h [14:0 - 14:41]

         @interface SSofaCommentService : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaCommentService.h [14:0 - 14:41]

         @interface SSofaCommentService : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaCommon/SSofaCommonDefine.h [26:0 - 26:39]

         @interface SSofaCommonDefine : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaCommon/SSofaCommonDefine.h [26:0 - 26:39]

         @interface SSofaCommonDefine : NSObject
         
                 ~~~~~~~~~~~~


         …faPlugin/SofaStores/SofaConfigStore/SSofaConfigStore.h [22:0 - 22:44]

         @interface SSofaConfigStore : SSofaBaseStore
         
                 ~~~~~~~~~~~~


         …faPlugin/SofaStores/SofaConfigStore/SSofaConfigStore.h [22:0 - 22:44]

         @interface SSofaConfigStore : SSofaBaseStore
         
                 ~~~~~~~~~~~~


         …teOrderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.h [12:0 - 12:49]

         @interface SSofaCreateOrderUnit : SCreateOrderCom
         
                 ~~~~~~~~~~~~


         …teOrderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.h [12:0 - 12:49]

         @interface SSofaCreateOrderUnit : SCreateOrderCom
         
                 ~~~~~~~~~~~~


         …e/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.h [11:0 - 11:35]

         @interface SSofaDateUtil : NSObject
         
                 ~~~~~~~~~~~~


         …e/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.h [11:0 - 11:35]

         @interface SSofaDateUtil : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDirectoryUtil.h [11:0 - 11:40]

         @interface SSofaDirectoryUtil : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDirectoryUtil.h [11:0 - 11:40]

         @interface SSofaDirectoryUtil : NSObject
         
                 ~~~~~~~~~~~~


         …rInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardModel.h [12:0 - 12:63]

         @interface SSofaDriverCarInfoCardModel : DriverCarInfoCardModel
         
                 ~~~~~~~~~~~~


         …rInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardModel.h [12:0 - 12:63]

         @interface SSofaDriverCarInfoCardModel : DriverCarInfoCardModel
         
                 ~~~~~~~~~~~~


         …arInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardUnit.h [12:0 - 12:61]

         @interface SSofaDriverCarInfoCardUnit : SDriverCarInfoCardCom
         
                 ~~~~~~~~~~~~


         …arInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardUnit.h [12:0 - 12:61]

         @interface SSofaDriverCarInfoCardUnit : SDriverCarInfoCardCom
         
                 ~~~~~~~~~~~~


         …DriverCarInfoCardCom/Units/SSofa/SSofaDriverInfoView.h [13:0 - 13:48]

         @interface SSofaDriverInfoView : SDriverInfoView
         
                 ~~~~~~~~~~~~


         …nts/SEstimateCom/SSofaEstimateUnit/SSofaEstimateUnit.h [12:0 - 12:43]

         @interface SSofaEstimateUnit : SEstimateCom
         
                 ~~~~~~~~~~~~


         …nts/SEstimateCom/SSofaEstimateUnit/SSofaEstimateUnit.h [12:0 - 12:43]

         @interface SSofaEstimateUnit : SEstimateCom
         
                 ~~~~~~~~~~~~


         …nts/SEvaluateCom/SSofaEvaluateUnit/SSofaEvaluateUnit.h [12:0 - 12:43]

         @interface SSofaEvaluateUnit : SEvaluateCom
         
                 ~~~~~~~~~~~~


         …nts/SEvaluateCom/SSofaEvaluateUnit/SSofaEvaluateUnit.h [12:0 - 12:43]

         @interface SSofaEvaluateUnit : SEvaluateCom
         
                 ~~~~~~~~~~~~


         …/SofaMap/SSofaStopAnnotation/SSofaFromStopAnnotation.h [12:0 - 12:63]

         @interface SSofaFromStopAnnotation : ONEXUserPositionAnnotation
         
                 ~~~~~~~~~~~~


         …/SofaMap/SSofaStopAnnotation/SSofaFromStopAnnotation.h [12:0 - 12:63]

         @interface SSofaFromStopAnnotation : ONEXUserPositionAnnotation
         
                 ~~~~~~~~~~~~


         …SofaMap/SSofaStopAnnotation/SSofaGetOffCarAnnotation.h [13:0 - 13:61]

         @interface SSofaGetOffCarAnnotation : ONESBasePointAnnotation
         
                 ~~~~~~~~~~~~


         …/SofaWebView/ExceptionsPage/SSofaH5WebViewController.h [14:0 - 14:54]

         @interface SSofaH5WebViewController : UIViewController
         
                 ~~~~~~~~~~~~


         …/SofaWebView/ExceptionsPage/SSofaH5WebViewController.h [14:0 - 14:54]

         @interface SSofaH5WebViewController : UIViewController
         
                 ~~~~~~~~~~~~


         …/SHomeAwareCom/SSofaHomeAwareUnit/SSofaHomeAwareUnit.h [13:0 - 13:45]

         @interface SSofaHomeAwareUnit : SHomeAwareCom
         
                 ~~~~~~~~~~~~


         …/SHomeAwareCom/SSofaHomeAwareUnit/SSofaHomeAwareUnit.h [13:0 - 13:45]

         @interface SSofaHomeAwareUnit : SHomeAwareCom
         
                 ~~~~~~~~~~~~


         …Sofa/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.h [12:0 - 12:56]

         @interface SSofaHostBizDelegate : NSObject<SBizDelegate>
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaHost/SSofaHostDycProxy/SSofaHostDycProxy.h [11:0 - 11:69]

         @interface SSofaHostDycProxy : NSProxy <SSofaHostBizDelegateProtocol>
         
                 ~~~~~~~~~~~~


         …ses/NextOne/ProductBiz/Sofa/SofaHost/SSofaHostMethod.h [12:0 - 12:37]

         @interface SSofaHostMethod : NSObject
         
                 ~~~~~~~~~~~~


         …ses/NextOne/ProductBiz/Sofa/SofaHost/SSofaHostMethod.h [12:0 - 12:37]

         @interface SSofaHostMethod : NSObject
         
                 ~~~~~~~~~~~~


         …Sofa/SofaHost/SSofaHostPluginCom/SSofaHostPluginUnit.h [11:0 - 11:43]

         @interface SSofaHostPluginUnit : SPluginCom
         
                 ~~~~~~~~~~~~


         …eCom/SSofaServiceBubbleUnit/SSofaInServiceBubbleUnit.h [12:0 - 12:58]

         @interface SSofaInServiceBubbleUnit : SSInServiceBubbleCom
         
                 ~~~~~~~~~~~~


         …eCom/SSofaServiceBubbleUnit/SSofaInServiceBubbleUnit.h [12:0 - 12:58]

         @interface SSofaInServiceBubbleUnit : SSInServiceBubbleCom
         
                 ~~~~~~~~~~~~


         …uctBiz/Sofa/SofaPlugin/SofaMap/SSofaLocationBusiness.h [15:0 - 15:79]

         @interface SSofaLocationBusiness : ONEBaseBusiness<ONESBaseMapEntrance
         
                 ~~~~~~~~~~~~


         …uctBiz/Sofa/SofaPlugin/SofaMap/SSofaLocationBusiness.h [15:0 - 15:79]

         @interface SSofaLocationBusiness : ONEBaseBusiness<ONESBaseMapEntrance
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaServices/SSofaLocationService.h [28:0 - 28:42]

         @interface SSofaLocationService : NSObject
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaServices/SSofaLocationService.h [28:0 - 28:42]

         @interface SSofaLocationService : NSObject
         
                 ~~~~~~~~~~~~


         …Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SSofaLock.h [13:0 - 13:31]

         @interface SSofaLock : NSObject
         
                 ~~~~~~~~~~~~


         …Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SSofaLock.h [13:0 - 13:31]

         @interface SSofaLock : NSObject
         
                 ~~~~~~~~~~~~


         …ne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaLogUtil.h [42:0 - 42:34]

         @interface SSofaLogUtil : NSObject
         
                 ~~~~~~~~~~~~


         …ne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaLogUtil.h [42:0 - 42:34]

         @interface SSofaLogUtil : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaMap/SSofaMapLineBizModel.h [11:0 - 11:42]

         @interface SSofaMapLineBizModel : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaMap/SSofaMapLineBizModel.h [11:0 - 11:42]

         @interface SSofaMapLineBizModel : NSObject
         
                 ~~~~~~~~~~~~


         …onents/SMapLineCom/SSofaMapLineUnit/SSofaMapLineUnit.h [15:0 - 15:41]

         @interface SSofaMapLineUnit : SMapLineCom
         
                 ~~~~~~~~~~~~


         …onents/SMapLineCom/SSofaMapLineUnit/SSofaMapLineUnit.h [15:0 - 15:41]

         @interface SSofaMapLineUnit : SMapLineCom
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaServices/SSofaMapService.h [30:0 - 30:37]

         @interface SSofaMapService : NSObject
         
                 ~~~~~~~~~~~~


         …ductBiz/Sofa/SofaPlugin/SofaServices/SSofaMapService.h [30:0 - 30:37]

         @interface SSofaMapService : NSObject
         
                 ~~~~~~~~~~~~


         …ne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaMapUtil.h [17:0 - 17:34]

         @interface SSofaMapUtil : NSObject
         
                 ~~~~~~~~~~~~


         …ne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaMapUtil.h [17:0 - 17:34]

         @interface SSofaMapUtil : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaMessageService.h [18:0 - 18:41]

         @interface SSofaMessageService : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaMessageService.h [18:0 - 18:41]

         @interface SSofaMessageService : NSObject
         
                 ~~~~~~~~~~~~


         …View/ExceptionsPage/SSofaNavigationWebViewController.h [15:0 - 15:72]

         @interface SSofaNavigationWebViewController : SSofaBaseWebViewControll
         
                 ~~~~~~~~~~~~


         …View/ExceptionsPage/SSofaNavigationWebViewController.h [15:0 - 15:72]

         @interface SSofaNavigationWebViewController : SSofaBaseWebViewControll
         
                 ~~~~~~~~~~~~


         …/Units/SSofaOperationFormUnit/SSofaOperationFormUnit.h [12:0 - 12:53]

         @interface SSofaOperationFormUnit : SOperationFormCom
         
                 ~~~~~~~~~~~~


         …/Units/SSofaOperationFormUnit/SSofaOperationFormUnit.h [12:0 - 12:53]

         @interface SSofaOperationFormUnit : SOperationFormCom
         
                 ~~~~~~~~~~~~


         …nts/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.h [12:0 - 12:43]

         @interface SSofaOrderActUnit : SOrderActCom
         
                 ~~~~~~~~~~~~


         …nts/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.h [12:0 - 12:43]

         @interface SSofaOrderActUnit : SOrderActCom
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [18:0 - 18:43]

         @interface SSofaOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [18:0 - 18:43]

         @interface SSofaOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [52:0 - 52:48]

         @interface SSofaOrderStateModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [52:0 - 52:48]

         @interface SSofaOrderStateModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [71:0 - 71:50]

         @interface SSofaOrderStationModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [71:0 - 71:50]

         @interface SSofaOrderStationModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [82:0 - 82:52]

         @interface SSofaOrderPassengerModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [82:0 - 82:52]

         @interface SSofaOrderPassengerModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [98:0 - 98:49]

         @interface SSofaOrderDriverModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [98:0 - 98:49]

         @interface SSofaOrderDriverModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [117:0 - 117:53]

         @interface SSofaOrderTripStatusModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [117:0 - 117:53]

         @interface SSofaOrderTripStatusModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [136:0 - 136:48]

         @interface SSofaShareOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [136:0 - 136:48]

         @interface SSofaShareOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [148:0 - 148:50]

         @interface SSofaOrderCommentModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [148:0 - 148:50]

         @interface SSofaOrderCommentModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [157:0 - 157:51]

         @interface SSofaCompleteOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [157:0 - 157:51]

         @interface SSofaCompleteOrderModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [230:0 - 230:49]

         @interface SSofaOrderDetailModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [230:0 - 230:49]

         @interface SSofaOrderDetailModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [253:0 - 253:51]

         @interface SSofaOrderTripInfoModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [253:0 - 253:51]

         @interface SSofaOrderTripInfoModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [273:0 - 273:54]

         @interface SSofaStationPassengerModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.h [273:0 - 273:54]

         @interface SSofaStationPassengerModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …/SOrderRecoveCom/SSofaOrderRecUnit/SSofaOrderRecUnit.h [13:0 - 13:43]

         @interface SSofaOrderRecUnit : SOrderRecCom
         
                 ~~~~~~~~~~~~


         …/SOrderRecoveCom/SSofaOrderRecUnit/SSofaOrderRecUnit.h [13:0 - 13:43]

         @interface SSofaOrderRecUnit : SOrderRecCom
         
                 ~~~~~~~~~~~~


         …ctBiz/Sofa/SofaPlugin/SofaServices/SSofaOrderService.h [56:0 - 56:39]

         @interface SSofaOrderService : NSObject
         
                 ~~~~~~~~~~~~


         …ctBiz/Sofa/SofaPlugin/SofaServices/SSofaOrderService.h [56:0 - 56:39]

         @interface SSofaOrderService : NSObject
         
                 ~~~~~~~~~~~~


         …e/Components/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.h [12:0 - 12:37]

         @interface SSofaOrderUnit : SOrderCom
         
                 ~~~~~~~~~~~~


         …e/Components/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.h [12:0 - 12:37]

         @interface SSofaOrderUnit : SOrderCom
         
                 ~~~~~~~~~~~~


         …s/SPayBillCom/Unit/SSofaPayBillUnit/SSofaPayBillUnit.h [12:0 - 12:37]

         @interface SSofaPayBillUnit : SPayCom
         
                 ~~~~~~~~~~~~


         …s/SPayBillCom/Unit/SSofaPayBillUnit/SSofaPayBillUnit.h [12:0 - 12:37]

         @interface SSofaPayBillUnit : SPayCom
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaPaymentService.h [13:0 - 13:41]

         @interface SSofaPaymentService : NSObject
         
                 ~~~~~~~~~~~~


         …Biz/Sofa/SofaPlugin/SofaServices/SSofaPaymentService.h [13:0 - 13:41]

         @interface SSofaPaymentService : NSObject
         
                 ~~~~~~~~~~~~


         …onents/PhoneProtectCom/Units/SSofaPhoneProtectedUnit.h [12:0 - 12:55]

         @interface SSofaPhoneProtectedUnit : SPhoneProtectedCom
         
                 ~~~~~~~~~~~~


         …onents/PhoneProtectCom/Units/SSofaPhoneProtectedUnit.h [12:0 - 12:55]

         @interface SSofaPhoneProtectedUnit : SPhoneProtectedCom
         
                 ~~~~~~~~~~~~


         …/SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.h [12:0 - 12:45]

         @interface SSofaPosMarkerUnit : SPosMarkerCom
         
                 ~~~~~~~~~~~~


         …/SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.h [12:0 - 12:45]

         @interface SSofaPosMarkerUnit : SPosMarkerCom
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaServices/SSofaRecoverOrderService.h [13:0 - 13:46]

         @interface SSofaRecoverOrderService : NSObject
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaServices/SSofaRecoverOrderService.h [13:0 - 13:46]

         @interface SSofaRecoverOrderService : NSObject
         
                 ~~~~~~~~~~~~


         …ents/SResetPosCom/Unit/SSofaResetUnit/SSofaResetUnit.h [12:0 - 12:40]

         @interface SSofaResetUnit : SResetPosCom
         
                 ~~~~~~~~~~~~


         …ents/SResetPosCom/Unit/SSofaResetUnit/SSofaResetUnit.h [12:0 - 12:40]

         @interface SSofaResetUnit : SResetPosCom
         
                 ~~~~~~~~~~~~


         …tBiz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [9:0 - 9:47]

         @interface SSofaOrderTripInfoAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …tBiz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [9:0 - 9:47]

         @interface SSofaOrderTripInfoAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [13:0 - 13:45]

         @interface SSofaOrderDetailAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [13:0 - 13:45]

         @interface SSofaOrderDetailAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [17:0 - 17:41]

         @interface SSofaMapLineAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [17:0 - 17:41]

         @interface SSofaMapLineAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [22:0 - 22:51]

         @interface SSofaGetNearDriversLocAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [22:0 - 22:51]

         @interface SSofaGetNearDriversLocAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [26:0 - 26:52]

         @interface SSofaGetMyDriverLocByIdAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [26:0 - 26:52]

         @interface SSofaGetMyDriverLocByIdAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [29:0 - 29:45]

         @interface SSofaCreateOrderAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [29:0 - 29:45]

         @interface SSofaCreateOrderAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [33:0 - 33:40]

         @interface SSofaGetETAAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [33:0 - 33:40]

         @interface SSofaGetETAAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [38:0 - 38:44]

         @interface SSofaCheckPointAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [38:0 - 38:44]

         @interface SSofaCheckPointAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [42:0 - 42:47]

         @interface SSofaEstimatePriceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [42:0 - 42:47]

         @interface SSofaEstimatePriceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [46:0 - 46:40]

         @interface SSofaConfigAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [46:0 - 46:40]

         @interface SSofaConfigAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [49:0 - 49:43]

         @interface SSofaCityFenceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [49:0 - 49:43]

         @interface SSofaCityFenceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [53:0 - 53:44]

         @interface SSofaStopSearchAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [53:0 - 53:44]

         @interface SSofaStopSearchAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [57:0 - 57:42]

         @interface SSofaFeekBackAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [57:0 - 57:42]

         @interface SSofaFeekBackAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [61:0 - 61:49]

         @interface SSofaWhetherFeekBackAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [61:0 - 61:49]

         @interface SSofaWhetherFeekBackAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [64:0 - 64:49]

         @interface SSofaUploadLatAndlngAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [64:0 - 64:49]

         @interface SSofaUploadLatAndlngAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [68:0 - 68:49]

         @interface SSofaWalkingDistanceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [68:0 - 68:49]

         @interface SSofaWalkingDistanceAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [72:0 - 72:44]

         @interface SSofaUserIsTrueAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [72:0 - 72:44]

         @interface SSofaUserIsTrueAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [76:0 - 76:36]

         @interface SSofaAdAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [76:0 - 76:36]

         @interface SSofaAdAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [80:0 - 80:45]

         @interface SSofaCommentTagsAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [80:0 - 80:45]

         @interface SSofaCommentTagsAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [84:0 - 84:47]

         @interface SSofaCommentCommitAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [84:0 - 84:47]

         @interface SSofaCommentCommitAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [88:0 - 88:46]

         @interface SSofaCheckForVoteAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [88:0 - 88:46]

         @interface SSofaCheckForVoteAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [93:0 - 93:52]

         @interface SSofaSubmitCancelReasonAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [93:0 - 93:52]

         @interface SSofaSubmitCancelReasonAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [97:0 - 97:54]

         @interface SSofaInserviceDriverImageAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …iz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [97:0 - 97:54]

         @interface SSofaInserviceDriverImageAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [101:0 - 101:44]

         @interface SSofaMisMessageApi : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [101:0 - 101:44]

         @interface SSofaMisMessageApi : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [105:0 - 105:43]

         @interface SSofaIsNewUserAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.h [105:0 - 105:43]

         @interface SSofaIsNewUserAPI : SSofaBaseAPI
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [18:0 - 18:48]

         @interface SSofaCheckPointModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [24:0 - 24:43]

         @interface SSofaShareModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [35:0 - 35:45]

         @interface SSofaMessageModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [46:0 - 46:47]

         @interface SSofaCityFenceModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [52:0 - 52:53]

         @interface SSofaStartAndEndTimeModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [60:0 - 60:55]

         @interface SSofaWorkingAndWeekendModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [71:0 - 71:51]

         @interface SSofaOperationTimeModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [78:0 - 78:41]

         @interface SSofaETAModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [85:0 - 85:50]

         @interface SSofaShareAndFeedModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …z/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [92:0 - 92:44]

         @interface SSofaConfigModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [169:0 - 169:56]

         @interface SSofaDriverPositionInfoModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [197:0 - 197:49]

         @interface SSofaEstimatedTPModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [208:0 - 208:51]

         @interface SSofaEstimatePriceModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [245:0 - 245:54]

         @interface SSofaSideOrderRecoverModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [268:0 - 268:53]

         @interface SSofaBizOrderRecoverModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [284:0 - 284:50]

         @interface SSofaOrderRecoverModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [320:0 - 320:53]

         @interface SSofaSocketSerializeModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [336:0 - 336:42]

         @interface SSofaStopModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [345:0 - 345:45]

         @interface SSofaStopListModel: SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [353:0 - 353:53]

         @interface SSofaWalkingDistanceModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [362:0 - 362:44]

         @interface SSofaAdItemModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [380:0 - 380:51]

         @interface SSofaAdShareInformation : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [393:0 - 393:39]

         @interface SSofaAdvert : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [410:0 - 410:40]

         @interface SSofaAdModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [418:0 - 418:49]

         @interface SSofaCommentTagsModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [425:0 - 425:48]

         @interface SSofaCommentTagModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [435:0 - 435:50]

         @interface SSofaVoteAreaInfoModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [443:0 - 443:58]

         @interface SSofaInserviceDriverImageModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [451:0 - 451:48]

         @interface SSofaMisMessageModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [459:0 - 459:52]

         @interface SSofaMisMessageListModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [463:0 - 463:47]

         @interface SSofaIsNewUserModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [467:0 - 467:48]

         @interface SSofaIsNewPointModel : SSofaBaseModel
         
                 ~~~~~~~~~~~~


         …ctBiz/Sofa/SofaPlugin/SofaServices/SSofaShareService.h [17:0 - 17:39]

         @interface SSofaShareService : NSObject
         
                 ~~~~~~~~~~~~


         …ctBiz/Sofa/SofaPlugin/SofaServices/SSofaShareService.h [17:0 - 17:39]

         @interface SSofaShareService : NSObject
         
                 ~~~~~~~~~~~~


         …es/NextOne/Components/SShareCom/Units/SSofaShareUnit.h [12:0 - 12:37]

         @interface SSofaShareUnit : SShareCom
         
                 ~~~~~~~~~~~~


         …es/NextOne/Components/SShareCom/Units/SSofaShareUnit.h [12:0 - 12:37]

         @interface SSofaShareUnit : SShareCom
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaMap/SSofaSiteAnnotationBusiness.h [11:0 - 11:85]

         @interface SSofaSiteAnnotationBusiness : ONEBaseBusiness<ONESBaseMapEn
         
                 ~~~~~~~~~~~~


         …/Sofa/SofaPlugin/SofaMap/SSofaSiteAnnotationBusiness.h [11:0 - 11:85]

         @interface SSofaSiteAnnotationBusiness : ONEBaseBusiness<ONESBaseMapEn
         
                 ~~~~~~~~~~~~


         …oveCom/Units/SSofaSmoothMoveUnit/SSofaSmoothMoveUnit.h [11:0 - 11:47]

         @interface SSofaSmoothMoveUnit : SSmoothMoveCom
         
                 ~~~~~~~~~~~~


         …oveCom/Units/SSofaSmoothMoveUnit/SSofaSmoothMoveUnit.h [11:0 - 11:47]

         @interface SSofaSmoothMoveUnit : SSmoothMoveCom
         
                 ~~~~~~~~~~~~


         …ugin/SofaMap/SSofaStopAnnotation/SSofaStopAnnotation.h [15:0 - 15:56]

         @interface SSofaStopAnnotation : ONESBasePointAnnotation
         
                 ~~~~~~~~~~~~


         …ugin/SofaMap/SSofaStopAnnotation/SSofaStopAnnotation.h [15:0 - 15:56]

         @interface SSofaStopAnnotation : ONESBasePointAnnotation
         
                 ~~~~~~~~~~~~


         …aMap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.h [23:0 - 23:85]

         @interface SSofaStopAnnotationBusiness : ONEBaseBusiness<ONESBaseMapEn
         
                 ~~~~~~~~~~~~


         …aMap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.h [23:0 - 23:85]

         @interface SSofaStopAnnotationBusiness : ONEBaseBusiness<ONESBaseMapEn
         
                 ~~~~~~~~~~~~


         …ofaMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.h [12:0 - 12:45]

         @interface SSofaTakeCarAnimationView : UIView
         
                 ~~~~~~~~~~~~


         …n/SofaMap/SSofaStopAnnotation/SSofaTakeCarAnnotation.h [12:0 - 12:59]

         @interface SSofaTakeCarAnnotation : ONESBasePointAnnotation
         
                 ~~~~~~~~~~~~


         …/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTextUtils.h [11:0 - 11:36]

         @interface SSofaTextUtils : NSObject
         
                 ~~~~~~~~~~~~


         …/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTextUtils.h [11:0 - 11:36]

         @interface SSofaTextUtils : NSObject
         
                 ~~~~~~~~~~~~


         …tOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimer.h [11:0 - 11:32]

         @interface SSofaTimer : NSObject
         
                 ~~~~~~~~~~~~


         …tOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimer.h [11:0 - 11:32]

         @interface SSofaTimer : NSObject
         
                 ~~~~~~~~~~~~


         …roductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimerBridge.h [11:0 - 11:38]

         @interface SSofaTimerBridge : NSObject
         
                 ~~~~~~~~~~~~


         …tOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaUtils.h [12:0 - 12:32]

         @interface SSofaUtils : NSObject
         
                 ~~~~~~~~~~~~


         …tOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaUtils.h [12:0 - 12:32]

         @interface SSofaUtils : NSObject
         
                 ~~~~~~~~~~~~


         …a/SofaPlugin/SofaWebView/ExceptionsPage/SSofaWebView.h [12:0 - 12:42]

         @interface SSofaWebView : SSofaBaseWebView
         
                 ~~~~~~~~~~~~


         …a/SofaPlugin/SofaWebView/ExceptionsPage/SSofaWebView.h [12:0 - 12:42]

         @interface SSofaWebView : SSofaBaseWebView
         
                 ~~~~~~~~~~~~


         …ugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.h [45:0 - 45:55]

         @interface SSofaWebViewJSHelperConfiguration : NSObject
         
                 ~~~~~~~~~~~~


         …ugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.h [45:0 - 45:55]

         @interface SSofaWebViewJSHelperConfiguration : NSObject
         
                 ~~~~~~~~~~~~


         …ugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.h [53:0 - 53:42]

         @interface SSofaWebViewJSHelper : NSObject
         
                 ~~~~~~~~~~~~


         …ugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.h [53:0 - 53:42]

         @interface SSofaWebViewJSHelper : NSObject
         
                 ~~~~~~~~~~~~


         …ugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.m [38:0 - 38:39]

         @interface SSofaJSShareModel : NSObject
         
                 ~~~~~~~~~~~~
CONCERN1: Unidiomatic accessor naming [UnidiomaticAccessorNaming]


         …uctBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [22:51 - 22:60]

         bleDictionary *getParams;
                        
                 ~~~~~~~~~~~~


         …ctBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m [123:0 - 123:34]
         (in: SSofaBaseWebView)

         - (NSMutableDictionary *)getParams {
         
                 ~~~~~~~~~~~~


         …/SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m [79:0 - 79:30]
         (in: SPayCom)

         - (NSString *)getCurrentBillID {
         
                 ~~~~~~~~~~~~


         …tOne/ProductBiz/Sofa/SofaPlugin/SSofaBizDataSource.m [114:0 - 114:31]
         (in: SSofaBizDataSource)

         - (NSString *)getCurrentOrderId {
         
                 ~~~~~~~~~~~~


         …SofaBubbleWaitResponeUnit/SSofaBubbleWaitResponeUnit.m [16:0 - 16:40]
         (in: SSofaBubbleWaitResponeUnit)

         -(SBaseBubbleWaitResponeModel *)getModel {
         
                 ~~~~~~~~~~~~


         …eCom/SSofaServiceBubbleUnit/SSofaInServiceBubbleUnit.m [38:0 - 38:32]
         (in: SSofaInServiceBubbleUnit)

         - (SBubbleCallback *)getCallBack {
         
                 ~~~~~~~~~~~~


         …ents/SMapLineCom/SSofaMapLineUnit/SSofaMapLineUnit.m [594:0 - 594:40]
         (in: SSofaMapLineUnit)

         - (DiDiPOIEntityModel *)getFromStopModel {
         
                 ~~~~~~~~~~~~


         …iew/ExceptionsPage/SSofaNavigationWebViewController.m [26:51 - 26:60]

         bleDictionary *getParams;
                        
                 ~~~~~~~~~~~~


         …ew/ExceptionsPage/SSofaNavigationWebViewController.m [202:0 - 202:34]
         (in: SSofaNavigationWebViewController)

         - (NSMutableDictionary *)getParams {
         
                 ~~~~~~~~~~~~


         …e/Components/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m [88:0 - 89:31]
         (in: SSofaOrderUnit)

         - (NSString *)getCurrentOrderId
         
                 ~~~~~~~~~~~~


         …ofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.h [124:60 - 124:73]
         (in: SSofaConfigModel)

         el <Optional> *getOffMessage; // 下车消息:下车后步行
                        
                 ~~~~~~~~~~~~


         …eCom/Units/SSofaSmoothMoveUnit/SSofaSmoothMoveUnit.m [185:0 - 185:33]
         (in: SSofaSmoothMoveUnit)

         - (NSMutableArray *)getPassPoints {
         
                 ~~~~~~~~~~~~


         …Map/SSofaStopAnnotation/SSofaStopAnnotationBusiness.h [30:56 - 30:73]
         (in: SSofaStopAnnotationBusiness)

         SMutableArray *getOffAnnotations;
                        
                 ~~~~~~~~~~~~


         …Map/SSofaStopAnnotation/SSofaStopAnnotationBusiness.h [30:56 - 30:73]
         (in: SSofaStopAnnotationBusiness)

         SMutableArray *getOffAnnotations;
                        
                 ~~~~~~~~~~~~


         …Map/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m [33:46 - 33:67]

         SMutableArray *getOffAnnimationViews;
                        
                 ~~~~~~~~~~~~


         …ap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m [746:0 - 746:36]
         (in: SSofaStopAnnotationBusiness)

         - (NSMutableArray *)getOffAnnotations{
         
                 ~~~~~~~~~~~~


         …ap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m [753:0 - 753:40]
         (in: SSofaStopAnnotationBusiness)

         - (NSMutableArray *)getOffAnnimationViews{
         
                 ~~~~~~~~~~~~
WARNING2: Potential assertion side effects [AssertionSideEffects]

         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [283:4 - 283:62]

         NSParameterAssert(CLLocationCoordinate2DIsValid(location));
         
                 ~~~~~~~~~~~~


         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [316:4 - 316:68]

         NSParameterAssert(CLLocationCoordinate2DIsValid(searchLocation));
         
                 ~~~~~~~~~~~~


         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [317:4 - 317:67]

         NSParameterAssert(CLLocationCoordinate2DIsValid(otherLocation));
         
                 ~~~~~~~~~~~~


         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [338:4 - 338:69]

         NSParameterAssert(CLLocationCoordinate2DIsValid(currentLocation));
         
                 ~~~~~~~~~~~~


         …roductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m [339:4 - 339:71]

         NSParameterAssert(CLLocationCoordinate2DIsValid(startSiteLocation));
         
                 ~~~~~~~~~~~~
WARNING2: Fixed-format NSDateFormatter not using invariant (POSIX) locale [FixedFormatDateFormatter]


         …e/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.m [19:4 - 19:39]
         (in: isBetweenHour:andHour:)

         [dateFormat setDateFormat:@"HH:mm"];//设定时间格式,这里可以设
         
                 ~~~~~~~~~~~~


         …e/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.m [71:4 - 71:37]
         (in: stringFromDate:usingDateFormat:)

         [dateFormat setDateFormat:format];//设定时间格式,这里可以设
         
                 ~~~~~~~~~~~~


         …ne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaLogUtil.m [65:4 - 65:50]
         (in: date)

         format.dateFormat = @"yyyy-MM-dd HH:mm:ss.SSS";
         
                 ~~~~~~~~~~~~
WARNING2: Retain cycle in block API usage [BlockAPIRetainCycle]

         Referencing self in blocks passed to this method causes a retain
         cycle.

         Please carefully review code that this rule warns about before
         modifying it — retain cycles and object lifetimes are a delicate
         issue where you must fully understand the context and use case in
         order to avoid unexpected and undesireable behavior. In other words,
         this rule may produce false positive diagnostics.

         …a/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [197:72 - 197:76]
         (in: p_registerObserver)

         ithBusinessId:[self p_sofaBusiness
                        
                 ~~~~~~~~~~~~


         …a/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m [206:85 - 206:89]
         (in: p_registerObserver)

         EqualToString:[self p_sofaBusiness
                        
                 ~~~~~~~~~~~~
WARNING2: Fragile error condition check [ErrorConditionCheck]


         Check the method return value (stored in the highlightExp variable)
         instead.

         …lugin/SofaStores/SofaConfigStore/SSofaConfigStore.m [416:12 - 416:17]

         if (error) {
             
                 ~~~~~~~~~~~~


         Check the method return value (stored in the configModel variable)
         instead.

         …lugin/SofaStores/SofaConfigStore/SSofaConfigStore.m [416:12 - 416:17]

         if (error) {
             
                 ~~~~~~~~~~~~
WARNING2: Globally caching a thread-unsafe class instance [ThreadUnsafeInstanceCaching]


         …e/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.m [80:4 - 80:47]
         (in: sharedDateFormatterInstance)

         static NSDateFormatter *dateFormatter = nil;
         
                 ~~~~~~~~~~~~
WARNING2: Undetached delegate or data source [UndetachedDelegate]


         SEstimatePriceViewController attaches itself as a TRBaseWebView
         delegate, but does not detach in -[NSObject dealloc].

         …arInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardUnit.m [33:4 - 33:31]
         (in: setUp)

         _driverView.delegate = self;
         
                 ~~~~~~~~~~~~


         SSofaDriverCarInfoCardUnit attaches itself as a SSofaDriverInfoView
         delegate, but does not detach in -[NSObject dealloc].

         …ofaMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [88:8 - 88:39]
         (in: firstCircleAnimatiom)

         _animationGroup.delegate = self;
         
                 ~~~~~~~~~~~~


         SSofaTakeCarAnimationView attaches itself as a CAAnimationGroup
         delegate, but does not detach in -[NSObject dealloc].

         …aMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.m [114:8 - 114:45]
         (in: secondCircleAnimatiom)

         _secondAnimationGroup.delegate = self;
         
                 ~~~~~~~~~~~~


         SSofaTakeCarAnimationView attaches itself as a CAAnimationGroup
         delegate, but does not detach in -[NSObject dealloc].

         …Biz/SCar/WebSupport/TRNewHomeEstimatePriceDetailVC.m [184:4 - 184:43]
         (in: loadEstimatePriceWebView)

         self.estimatePriceWebView.delegate=self;
         
                 ~~~~~~~~~~~~
WARNING2: Unused error value [UnusedErrorValue]


         …in/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.m [270:8 - 270:22]
         (in: shareData:callBack:)

         NSError *error;
         
                 ~~~~~~~~~~~~
WARNING2: Conflicting category methods [CategoryMethodConflict]


         The method -canShowEvaluateEntrance in SSCarBizDataSource category
         SEvaluate is in conflict with a method of the same name in category
         Activity (which is in file:
         /Users/didi/Desktop/SCar/Pods/../ONESCar/SCar/SCarCommon/Pod/Classes/N
         extOne/Components/SActiveButtonCom/DataSource/SCar/SSCarBizDataSource+
         Activity.m). It is not defined which implementation of this method
         takes precedence at runtime.

         …tonCom/DataSource/Sofa/SSofaBizDataSource+Activity.m [139:0 - 139:31]

         - (BOOL)canShowEvaluateEntrance {
         
                 ~~~~~~~~~~~~


         The method -canShowEvaluateEntrance in SSofaBizDataSource category
         Activity is in conflict with a method of the same name in category
         SEvaluate (which is in file:
         /Users/didi/Desktop/SCar/Pods/../ONESCar/SCar/SCarCommon/Pod/Classes/N
         extOne/Components/SEvaluateCom/SSofaEvaluateUnit/SSofaBizDataSource+SE
         valuate.m). It is not defined which implementation of this method
         takes precedence at runtime.

         …Com/SSofaEvaluateUnit/SSofaBizDataSource+SEvaluate.m [114:0 - 114:31]

         - (BOOL)canShowEvaluateEntrance {
         
                 ~~~~~~~~~~~~


         The method -canShowEvaluateEntrance in SSofaBizDataSource category
         SEvaluate is in conflict with a method of the same name in category
         Activity (which is in file:
         /Users/didi/Desktop/SCar/Pods/../ONESCar/SCar/SCarCommon/Pod/Classes/N
         extOne/Components/SActiveButtonCom/DataSource/Sofa/SSofaBizDataSource+
         Activity.m). It is not defined which implementation of this method
         takes precedence at runtime.

         …tonCom/DataSource/Taxi/STaxiBizDataSource+Activity.m [333:0 - 333:31]

         - (BOOL)canShowEvaluateEntrance {
         
                 ~~~~~~~~~~~~
WARNING2: Recommended compiler warning options [CompilerWarnings]

         …/Components/SSmoothMoveCom/Units/SSpecSmoothMoveUnit/DSCarTypeHelp.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/ProductBiz/SCar/Store/Persistence/GVUserDefaults+SCPersistenceTag.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/SCar/Models/LikeWaitModel/LikeWaitCouponModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SPackCarCom/SSCarUnit/View/SectionedTableView/NKSectionedTableView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCom/SSCarUnit/View/SectionedTableView/NKSectionedTableViewAdapter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/NSArray+SSofaOperation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Utils/Category/NSString+DDPrice.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Driver/SDK/General/Category/NSString+DJHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/NSString+SSofaUtils.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/AirportComponent/SSCarUnit/OMGAnalytics+Airport.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPackCarCom/SSCarUnit/View/ONEOperationTableAdapter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/Driver/Utils/ONEUserStore+SDDJ.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/Sofa/SofaPlugin/SofaWebView/ONEUserStore+SSofaUserHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Services/OneServerImage/OneServerImageCache.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Taxi/Services/OneServerImage/OneServerImageHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Taxi/Services/OneServerImage/OneServerImageManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SSctxCom/Units/MapBusiness/PassengerOrderRouteBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SOneCallXCom/Units/Model/SActivityInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/AirportComponent/SSCarUnit/View/SAirportCarInfoBaseView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/AirportComponent/SSCarUnit/View/SAirportCarInfoScrollView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/AirportComponent/SSCarUnit/View/SAirportCarInfoScrollViewCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SCreateOrderCom/AirportUnit/SAirportCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/AirportComponent/SSCarUnit/Util/SAirportDispalyUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/AirportComponent/SSCarUnit/Model/SAirportOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/AirportComponent/SSCarUnit/View/SAirportPlaneInfoBaseView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Models/SAirportPoiElementModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Models/SAirportPoiModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/AirportComponent/SSCarUnit/View/SAirportTimeViewHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Utils/SApolloHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/AirportComponent/SSCarUnit/Request/SBookingEtaInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/AirportComponent/SSCarUnit/AirportStore/SCAirportConfigStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/AirportComponent/SSCarUnit/AirportStore/SCAirportObserverStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Services/SCBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Store/public/SCConfigStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Store/public/SCOrderStore+logInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/SCar/Store/public/SCOrderStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Store/private/SCOrderUtiles.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCSmoothPointModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCWanliuGetConfigModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCWanliuGetFlagModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarActivityData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarActivityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Store/public/SCarActivityStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Store/public/SCarAdapterStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarAdditionOrderData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Store/private/SCarBaseStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/SCar/WebSupport/SCarBaseWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Desktop/SCar/Pods/Target Support Files/SCarCommon/SCarCommon-dummy.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCommon/Pod/Classes/NextOne/ProductBiz/SCar/Utils/SCarCommonHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/SCar/WebSupport/SCarEnterpriseFeeExplainFusionController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …oductBiz/SCar/WebSupport/SCarEnterpriseFeeExplainWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarExtraInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Com/SSCarInServiceBubbleUnit/SCarFeeDetailControllerViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/ProductBiz/SCar/Models/Payment/SCarFeeObjectEntracnceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/Payment/SCarFeePageModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarGetA3Model.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Request/SCarGetA3Request.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Utils/SCarLocalNotification.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SMapLineCom/SCarMapLineUnit/SCarMapLineUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Models/SCarNewHomePageEntrenceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/ProductBiz/SCar/Models/SCarNewHomePageUnfinishedOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SOrderTrajCom/SCarUnit/SCarOrderTrajUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SPayBillCom/Unit/SCarUnit/SCarPayBillUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Store/public/SCarPayReqStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Services/DataService/SCarPushMsg.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/SCar/Services/DataService/SCarPushReqBuilder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/SCar/Services/DataService/SCarPushService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/SCarRegionInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Utils/SCarRequestHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ProductBiz/SCar/SCarUI/SpecFastcarUpCarGrade/SCarUpCarGradePopView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Models/SCarWanliuCarTypeCouponModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Request/SCarWanliuGetConfig.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SMapBizCom/SFastMapBizUnit/SCarpoolRouteLogic/SCarpoolRouteLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SPackCarCom/SSCarUnit/Cell/SComboOperationCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SPackCarCom/SSCarUnit/Model/SComboOperationCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SPackCarCom/SSCarUnit/Cell/SComboPositionCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SPackCarCom/SSCarUnit/Model/SComboPositionModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJAdInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Driver/Utils/SDDJBackUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Driver/Module/Html5/SDDJBaseWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/Biz/BizManager/SDDJBizContainer.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Driver/Service/SDDJBulletinBoardsService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Driver/Module/CancelOrder/SDDJCancelOrderService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Driver/Module/CancelOrder/View/SDDJCancelReasonCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ductBiz/Driver/SDK/Biz/BizModels/OrderCancel/SDDJCancelReasonModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tBiz/Driver/Module/CancelOrder/ViewController/SDDJCancelReasonPage.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ductBiz/Driver/SDK/Biz/BizModels/OrderCancel/SDDJCancelResultModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJCity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SEstimateCom/SDriverUnit/Model/SDDJCityEstimateModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJConfigService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SCreateOrderCom/DriverUnit/View/SDDJConfirmWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJDataStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJDestCity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …uctBiz/Driver/SDK/Biz/BizModels/Location/SDDJDriverCurrentLocation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Driver/SDK/Biz/BizImp/Driver/SDDJDriverLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/ProductBiz/Driver/SDK/Biz/BizModels/Driver/SDDJDriverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Driver/SDK/Biz/BizModels/Trip/SDDJDrivingFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJEnterpriseData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …OrderCom/DriverUnit/View/SDDJEnterpriseFeeExplainWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJEnterpriseInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Driver/SDK/Networking/Request/SDDJErrorHandler.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJEstiReqModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SEstimateCom/SDriverUnit/Model/SDDJEstimateModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJEstimateService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/SEstimateCom/SDriverUnit/Controller/SDDJEstimateViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJEvaluateDidCommentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJEvaluateTagModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ductBiz/Driver/SDK/Biz/BizImp/Evaluation/SDDJEvaluationModuleLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJFormStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Driver/SDK/Biz/BizImp/Share/SDDJGiftBagModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Driver/Module/Html5/SDDJH5UrlManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJHomeMessageModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Driver/SDK/Biz/BizImp/HomeModule/SDDJHomeModuleLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJIconConfig.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Driver/Service/SDDJInServiceFeeStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJInfoFlow.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …uctBiz/Driver/Module/LocalNotification/SDDJLocalNotificationCenter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Driver/Temp/SDDJMultiDriForm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/Driver/Temp/SDDJNearDriversModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Driver/Module/NearbyDrivers/SDDJNearbyDriver.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/ProductBiz/Driver/SDK/Biz/BizModels/Driver/SDDJNearbyDriverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/Networking/Define/SDDJNetConfig.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Driver/SDK/Networking/Request/SDDJNetEngine.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/Driver/Utils/SDDJNetUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Driver/SDK/Biz/BizModels/Order/SDDJOrderBriefModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/Driver/SDK/Biz/BizModels/OrderCancel/SDDJOrderCancelDuty.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/ProductBiz/Driver/SDK/Biz/BizModels/PaymentModel/SDDJOrderFeeItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/Order/SDDJOrderInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/Biz/BizManager/SDDJOrderManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/Order/SDDJOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Driver/SDK/Biz/BizImp/Order/SDDJOrderModuleLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/Driver/Service/SDDJOrderService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ctBiz/Driver/Module/CancelOrder/ViewController/SDDJOtherReasonPage.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Driver/SDK/Biz/BizModels/User/SDDJPassengerModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/Driver/SDK/Biz/BizModels/PaymentModel/SDDJPayChannelItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/ProductBiz/Driver/SDK/Biz/BizModels/PaymentModel/SDDJPaymentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Driver/SDK/Biz/BizImp/Payment/SDDJPaymentModuleLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJPeriodItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJPickupFee.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Driver/SDK/Biz/BizModels/Location/SDDJPositionInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/Driver/SDK/Biz/BizModels/PaymentModel/SDDJPrivilegeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SCreateOrderCom/DriverUnit/Model/SDDJPublishConfirmModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ductBiz/Driver/SDK/Biz/BizModels/PaymentModel/SDDJRealtimeFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/ProductBiz/Driver/SDK/Networking/Request/SDDJRequestHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Driver/SDK/Networking/Request/SDDJRequestManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/Driver/Utils/SDDJRichTextUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJSettings.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/Biz/BizImp/Share/SDDJShareLogic.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ductBiz/Driver/SDK/Biz/BizModels/ShareModel/SDDJSharePlatformModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/Driver/Temp/SDDJSingleDriForm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Driver/SDK/Biz/BizManager/SDDJSmoothManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/Order/SDDJSmoothModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Driver/SDK/Biz/BizManager/SDDJSocketBizManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Driver/SDK/Networking/Socket/SDDJSocketManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJTipSettings.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJVIPInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJWaitFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Driver/SDK/Biz/BizModels/SDDJWarmUpData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/Helpers/WeakTimer/SDDJWeakTimer.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Driver/SDK/Helpers/WeakTimer/SDDJWeakTimerContainer.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SActiveButtonCom/unit/SDriverActiveBoardsUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SCreateOrderCom/DriverUnit/View/SDriverAlertView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Driver/SDriverBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …bleCom/SDriverBubbleWaitResponseUnit/SDriverBubbleWaitResponseUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lCom/SCancelOrderCom/SDriverCancelOrderUnit/SDriverCancelOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ncelCom/SCancelTripCom/SDriverCancelTripUnit/SDriverCancelTripUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SCreateOrderCom/DriverUnit/View/SDriverComfirmButton.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/SCreateOrderCom/DriverUnit/SDriverCreateOrderUnit+FailureHandle.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SCreateOrderCom/DriverUnit/SDriverCreateOrderUnit+Private.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SCreateOrderCom/DriverUnit/SDriverCreateOrderUnit+PublishConfirm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SCreateOrderCom/DriverUnit/SDriverCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SActiveButtonCom/DataSource/Driver/SDriverDataSource+Activity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SCreateOrderCom/DriverUnit/SDriverDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SDriverCarInfoCardCom/DataSource/SDriverDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SHelpCallCarCom/Unit/Driver/SDriverDataSource+HelpCallCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SOrderTrajCom/DataSource/SDriverDataSource+OrderTraj.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …honeProtectCom/DataSource/SDriver/SDriverDataSource+PhoneProtected.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …etinBoardsCom/DataSource/SDriver/SDriverDataSource+SBulletinBoards.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SEstimateCom/SDriverUnit/SDriverDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SEvaluateCom/DriverUnit/SDriverDataSource+SEvaluate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SNIMCom/DataSource/SDriverDataSource+SIMCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SPayBillCom/Unit/SDriver/SDriverDataSource+SPayBillCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SPayCom/DataSource/SDriver/SDriverDataSource+SPayCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arkerCom/DataSource/SDriverDataSource/SDriverDataSource+SPosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SShareJourneyCom/DataSource/SDriverDataSource+ShareJourney.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/STipCom/DataSource/SDriverDataSource+TipCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/Driver/SDriverDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SEPaySelectCom/Units/SDriverEPaySelectUnit/SDriverEPaySelectUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SEstimateCom/SDriverUnit/SDriverEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SHelpCallCarCom/Unit/Driver/SDriverHelpCallCarUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SHomeAwareCom/SDriverUnit/SDriverHomeAwareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SBubbleCom/SDriverInServiceBubbleUnit/SDriverInServiceBubbleUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ionFormCom/Units/SDriverOperationFormUnit/SDriverOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SOrderActCom/SDriverUnit/SDriverOrderActUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SOrderRecoveCom/DriverUnit/SDriverOrderRecUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/Components/SOrderCom/SDriverUnit/SDriverOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SPayBillCom/Unit/SDriver/SDriverPayBillUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SPosMarkerCom/SDriverPosMarkerUnit/SDriverPosMarkerUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SResetPosCom/Unit/SDriver/SDriverResetPosUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SSceneTabCom/Units/SDriverSceneTabUnit/SDriverSceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/Components/SShareCom/Units/SDriverShareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SSmoothMoveCom/Units/SDriverSmoothMoveUnit/SDriverSmoothMoveUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …eCarPlaceCom/Units/SDriverTakeCarPlaceUnit/SDriverTakeCarPlaceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SWebViewCom/Units/Driver/SDriverWebUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lderCom/STaxiElderUnit/SElderHomeView/Model/SElderAddressListModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SElderCom/STaxiElderUnit/Request/SElderAddressListRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Elder/SElderBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCarCommon/Pod/Classes/NextOne/ProductBiz/Elder/SElderBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ElderUnit/SElderHomeView/ChooseAddressView/SElderChooseAddressCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Unit/SElderHomeView/ChooseAddressView/SElderChooseAddressSearchBar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SElderHomeView/ChooseAddressView/SElderChooseAddressViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SHomeAwareCom/SElder/SElderHomeAwareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SElderCom/STaxiElderUnit/SElderHomeView/SElderHomeInputView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SElderCom/STaxiElderUnit/SElderHomeView/SElderHomeView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SElderCom/STaxiElderUnit/SElderHomeView/SElderStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iElderUnit/SElderHomeView/ChooseAddressView/SElderTaxiVoiceControl.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …it/SElderHomeView/ChooseAddressView/SElderTaxiVoiceInputController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ElderUnit/SElderHomeView/ChooseAddressView/SElderTaxiVoiceWaveView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SPackCarCom/SSCarUnit/Cell/SEstimateFeeCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SPackCarCom/SSCarUnit/Model/SEstimateFeeCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SPackCarCom/SSCarUnit/ViewController/SEstimatePriceViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …m/SCancelTripCom/SScarCancelTripUnit/SFastBizDataSource+CancelTrip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SCarpoolCom/dataSource/SFastBizDataSource+CarpoolPassengers.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCreateOrderCom/SSCarUnit/FastUnit/SFastBizDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SDynamicPriceCom/SSCarUnit/SFastBizDataSource+DynamicPrice.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …letinBoardsCom/DataSource/SSCar/SFastBizDataSource+SBulletinBoards.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SEstimateCom/SSCarUnit/SFastBizDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SHelpCallCarCom/Unit/Fast/SFastBizDataSource+SHelpCallCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SNIMCom/DataSource/SFastBizDataSource+SIMCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …om/DataSource/SSCarPosMarkerUnit/SFastBizDataSource+SSCarPosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ionInfoCom/SFastCarStationInfoUnit/SFastBizDataSource+SStationInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/DataSource/SFastBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/BizDelegate/SFastBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ancelCom/SCancelOrderCom/SFastCancelOrderUnit/SFastCancelOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SHelpCallCarCom/Unit/Fast/SFastCarHelpCallCarUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/SBubbleCom/SSCarInServiceBubbleUnit/SFastCarInServiceBubbleUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SMapBizCom/SFastMapBizUnit/SFastCarMapBizUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …MapLineCom/SCarMapLineUnit/SFastCarMapLineUnit/SFastCarMapLineUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SCarpoolCom/SFastCarpoolUnit/SFastCarPoolUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SResetPosCom/Unit/SFastCar/SFastCarResetPosUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SStationInfoCom/UI/SFastCarStationGuidWebController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/SStationInfoCom/SFastCarStationInfoUnit/SFastCarStationInfoUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arPlaceCom/Units/SFastCarTakeCarPlaceUnit/SFastCarTakeCarPlaceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SChooseSeatCom/SFastChooseSeatUnit/SFastChooseSeatUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SCreateOrderCom/SSCarUnit/FastUnit/SFastCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SDynamicPriceCom/SSCarUnit/SFastDynamicPriceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SEPaySelectCom/Units/SFastEPaySelectUnit/SFastEPaySelectUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SEstimateCom/SSCarUnit/SFastEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/Components/SGuideCom/SScarUnit/SFastGuideUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …erationFormCom/Units/SFastOperationFormUnit/SFastOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SSceneTabCom/Units/SFastSceneTabUnit/SFastSceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SOneCallXCom/Units/Model/SGetActivityInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/Components/SHireDriverCom/Views/SHDAddrCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SHireDriverCom/Views/SHDAddrOperationCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/Components/SHireDriverCom/Views/SHDEstiCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SHireDriverCom/Views/SHDEstiDetailCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SHireDriverCom/Views/SHDEstiOperationCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SHireDriverCom/Views/SHDImgTitleOperationCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SHireDriverCom/Views/SHDNormalCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SEvaluateCom/SCarUnit/SCommentModel/SHasCommentedRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/Components/SHireDriverCom/SHireDriverUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SHireDriverCom/SHireDriverViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/Components/SHireDriverCom/SHireDriverViewManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SHireDriverCom/Views/SHireOperationView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SOneCallXCom/Units/View/SHomePage+SOneCallXCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/AirportComponent/SSCarUnit/SLuxuryAirportUnit/SLuxuryAirportUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/AirportComponent/SSCarUnit/DataSource/SLuxuryBizDataSource+CIPCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCancelTripCom/SScarCancelTripUnit/SLuxuryBizDataSource+CancelTrip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …eateOrderCom/SSCarUnit/LuxuryUnit/SLuxuryBizDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rportComponent/SSCarUnit/DataSource/SLuxuryBizDataSource+GuideTool.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/SEstimateCom/SSCarUnit/SLuxuryBizDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SHelpCallCarCom/Unit/SPec/SLuxuryBizDataSource+SHelpCallCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/DataSource/SSCarPosMarkerUnit/SLuxuryBizDataSource+SSCarPosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/DataSource/SLuxuryBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/BizDelegate/SLuxuryBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ionFormCom/Units/SLuxuryOperationFormUnit/SLuxuryOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SSceneTabCom/Units/SLuxurySceneTabUnit/SLuxurySceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SOFAPlugin.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SOneCallXCom/Units/View/SOneCallXBannerView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SOneCallXCom/Units/View/SOneCallXFormView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/Components/SOneCallXCom/Units/SOneCallXUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SOneCallXCom/Units/View/SOneCallXViewController+SEstimateCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SOneCallXCom/Units/View/SOneCallXViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPackCarCom/SSCarUnit/View/SPackCarFormTableAdapter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCom/SSCarUnit/ViewController/SPackCarHomeViewController+CarType.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ckCarCom/SSCarUnit/ViewController/SPackCarHomeViewController+Combo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCom/SSCarUnit/ViewController/SPackCarHomeViewController+Contact.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCom/SSCarUnit/ViewController/SPackCarHomeViewController+Estimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ackCarCom/SSCarUnit/ViewController/SPackCarHomeViewController+Form.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …PackCarCom/SSCarUnit/ViewController/SPackCarHomeViewController+POI.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCom/SSCarUnit/ViewController/SPackCarHomeViewController+PayType.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …PackCarCom/SSCarUnit/ViewController/SPackCarHomeViewController+Tip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/SPackCarCom/SSCarUnit/ViewController/SPackCarHomeViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SPackCarCom/SSCarUnit/Model/SPackCarModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SPackCarCom/SSCarUnit/View/SPackCarOperationFormView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SPackCarCom/SSCarUnit/Cell/SPackCarPayTypeCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SPackCarCom/SSCarUnit/Model/SPackCarPayTypeCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SPackCarCom/SSCarUnit/Service/SPackCarService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SPackCarCom/SSCarUnit/Model/SPackFormStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …FastMapBizUnit/SCarpoolRouteLogic/MapBusiness/SPassengerAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SFastMapBizUnit/SCarpoolRouteLogic/MapBusiness/SPassengerBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/Components/SHireDriverCom/SPickerItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SMapBizCom/SPremiumMapBizUnit/SPremiumCarMapBizUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ar/SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Services/SReqSrv.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …om/SFastMapBizUnit/SCarpoolRouteLogic/MapBusiness/SRouteAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/AirportComponent/SSCarUnit/Category/SSCarAirportUnit+OrderFlight.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/AirportComponent/SSCarUnit/SSCarAirportUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SActiveButtonCom/DataSource/SCar/SSCarBizDataSource+Activity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SCarTypeCom/DataSource/SSCarBizDataSource+CarType.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCarInfoCardCom/DataSource/SSCar/SSCarBizDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SDynamicPriceCom/SSCarUnit/SSCarBizDataSource+DynamicPrice.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SNotOpenCityCom/DataSource/SSCarBizDataSource+NotOpenCity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/SOrderTrajCom/DataSource/SSCarBizDataSource+OrderTraj.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/PhoneProtectCom/DataSource/SCar/SSCarBizDataSource+PhoneProtect.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/AirportComponent/SSCarUnit/DataSource/SSCarBizDataSource+SAirport.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …letinBoardsCom/DataSource/SSCar/SSCarBizDataSource+SBulletinBoards.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SEvaluateCom/SCarUnit/SSCarBizDataSource+SEvaluate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SNIMCom/DataSource/SSCarBizDataSource+SIMCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SOneCallXCom/DataSource/SSCarBizDataSource+SOneCallX.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ayBillCom/DataSource/SCarDataSource/SSCarBizDataSource+SPayBillCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SPayCom/DataSource/SCar/SSCarBizDataSource+SPayCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …om/DataSource/SSCarPosMarkerUnit/SSCarBizDataSource+SSCarPosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SSctxCom/Units/SpecFlashUnit/SSCarBizDataSource+SSctxCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SShareJourneyCom/DataSource/SSCarBizDataSource+ShareJourney.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …othMoveCom/Units/SSpecSmoothMoveUnit/SSCarBizDataSource+SmoothMove.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/STipCom/DataSource/SSCarBizDataSource+TipCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/DataSource/SSCarBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …eBubbleCom/SSCarBubbleWaitResponseUnit/SSCarBubbleWaitResponseUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Biz/SCar/Services/BulletinBoardsService/SSCarBulletinBoardsService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCancelCom/SCancelTripCom/SScarCancelTripUnit/SSCarCancelTripUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …celTripCom/SScarCancelTripUnit/UI/SSCarCancelTripWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SCreateOrderCom/SSCarUnit/SSCarCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SEstimateCom/SSCarUnit/SSCarEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SBubbleCom/SSCarInServiceBubbleUnit/SSCarInServiceBubbleUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SPickLikeWait/Units/SCar/SSCarLikeWaitUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/SSCarOrderShareModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/Components/SPackCarCom/SSCarUnit/SSCarPackCarUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/SCar/Utils/SSCarPathHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/PhoneProtectCom/Units/SSCarPhoneProtectedUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SReservationCardCom/Unit/SSCar/SSCarReservationUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SResetPosCom/Unit/SSCar/SSCarResetPosUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SSctxCom/Units/SpecFlashUnit/SSCarSctxUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SSmoothMoveCom/Units/SSpecSmoothMoveUnit/SSCarSmoothMoveUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …STakeCarPlaceCom/Units/SSCarTakeCarPlaceUnit/SSCarTakeCarPlaceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/Components/SWebViewCom/Units/SCar/SSCarWebUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Event/SSDataEventMonitor.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/SPackCarCom/SSCarUnit/View/SSimpleDataPicker/SSimpleDataPicker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaADService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaAccountService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SActiveButtonCom/unit/SSofaActiveBoardsUnit/SSofaActiveBoardsUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaCommon/SSofaAnalyticsManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Sofa/SofaPlugin/SofaHttp/SSofaApiManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaBaseAPI.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaBaseModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Sofa/SofaPlugin/SofaStores/SSofaBaseStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Sofa/SofaPlugin/SofaWebView/SSofaBaseWebView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …a/SofaPlugin/SofaWebView/ExceptionsPage/SSofaBaseWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …faPlugin/SofaHttp/SofaModels/SofaBizModel/SSofaBizCreateOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SActiveButtonCom/DataSource/Sofa/SSofaBizDataSource+Activity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SCarpoolCom/SSofaCarpoolUnit/SSofaBizDataSource+Carpool.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SDriverCarInfoCardCom/DataSource/SSofaBizDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ubbleCom/SSofaServiceBubbleUnit/SSofaBizDataSource+InServiceBubble.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SMapLineCom/SSofaMapLineUnit/SSofaBizDataSource+MapLine.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SPayBillCom/Unit/SSofaPayBillUnit/SSofaBizDataSource+PayBillUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …aSource/SSofaSPhoneProtectedUnit/SSofaBizDataSource+PhoneProtected.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SPosMarkerCom/SSofaPosMarkerUnit/SSofaBizDataSource+PosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/DataSource/SSofaBulletinBoards/SSofaBizDataSource+SBulletinBoards.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SEstimateCom/SSofaEstimateUnit/SSofaBizDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SEvaluateCom/SSofaEvaluateUnit/SSofaBizDataSource+SEvaluate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPayCom/DataSource/SSofa/SSofaBizDataSource+SPayCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …othMoveCom/Units/SSofaSmoothMoveUnit/SSofaBizDataSource+SmoothMove.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SSofaBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaPlugin/SofaDycMix/SSofaBizDelegateDycMix.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SofaPlugin/SofaHttp/SofaModels/SofaBizModel/SSofaBizPassengerModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaBubbleView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …oneBubbleCom/SSofaBubbleWaitResponeUnit/SSofaBubbleWaitResponeUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaPlugin/SofaWebView/SSofaBusinessWebViews.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SActiveButtonCom/unit/SSofaActiveBoardsUnit/SSofaButtonConf.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ancelCom/SCancelOrderCom/SSofaCancelOrderUnit/SSofaCancelOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCancelCom/SCancelTripCom/SSofaCancelTripUnit/SSofaCancelTripUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SCarpoolCom/SSofaCarpoolUnit/SSofaCarpoolUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SChooseSeatCom/SSofaChooseSeatUnit/SSofaChooseSeatUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaCommentService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Sofa/SofaPlugin/SofaCommon/SSofaCommonDefine.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …uctBiz/Sofa/SofaPlugin/SofaStores/SofaConfigStore/SSofaConfigStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SCreateOrderCom/SSofaCreateOrderUnit/SSofaCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDateUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaDirectoryUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SDriverCarInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SDriverCarInfoCardCom/Units/SSofa/SSofaDriverCarInfoCardUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/SDriverCarInfoCardCom/Units/SSofa/SSofaDriverInfoView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SEstimateCom/SSofaEstimateUnit/SSofaEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SEvaluateCom/SSofaEvaluateUnit/SSofaEvaluateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ofa/SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaFromStopAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …fa/SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaGetOffCarAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ofa/SofaPlugin/SofaWebView/ExceptionsPage/SSofaH5WebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SHomeAwareCom/SSofaHomeAwareUnit/SSofaHomeAwareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Sofa/SofaHost/SSofaHostDycProxy/SSofaHostBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaHost/SSofaHostDycProxy/SSofaHostDycProxy.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/Sofa/SofaHost/SSofaHostMethod.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Sofa/SofaHost/SSofaHostPluginCom/SSofaHostPluginUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SBubbleCom/SSofaServiceBubbleUnit/SSofaInServiceBubbleUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaLocationBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaLocationService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SSofaLock.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaLogUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaMapLineBizModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SMapLineCom/SSofaMapLineUnit/SSofaMapLineUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaMapService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaMapUtil.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaMessageService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Plugin/SofaWebView/ExceptionsPage/SSofaNavigationWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …erationFormCom/Units/SSofaOperationFormUnit/SSofaOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SOrderActCom/SSofaOrderActUnit/SSofaOrderActUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SOrderRecoveCom/SSofaOrderRecUnit/SSofaOrderRecUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaOrderService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SOrderCom/SSofaOrderUnit/SSofaOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SPayBillCom/Unit/SSofaPayBillUnit/SSofaPayBillUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaPaymentService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/PhoneProtectCom/Units/SSofaPhoneProtectedUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPosMarkerCom/SSofaPosMarkerUnit/SSofaPosMarkerUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaRecoverOrderService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SResetPosCom/Unit/SSofaResetUnit/SSofaResetUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Sofa/SofaPlugin/SofaHttp/SofaBaseApi/SSofaRpcApis.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Sofa/SofaPlugin/SofaHttp/SofaModels/SSofaRpcModels.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Sofa/SofaPlugin/SofaServices/SSofaShareService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/Components/SShareCom/Units/SSofaShareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Sofa/SofaPlugin/SofaMap/SSofaSiteAnnotationBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SSmoothMoveCom/Units/SSofaSmoothMoveUnit/SSofaSmoothMoveUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iz/Sofa/SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaStopAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaStopAnnotationBusiness.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …a/SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaTakeCarAnimationView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Sofa/SofaPlugin/SofaMap/SSofaStopAnnotation/SSofaTakeCarAnnotation.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTextUtils.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimer.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaTimerBridge.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/SSofaUtils.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ProductBiz/Sofa/SofaPlugin/SofaWebView/ExceptionsPage/SSofaWebView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iz/Sofa/SofaPlugin/SofaWebView/ExceptionsPage/SSofaWebViewJSHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SActiveButtonCom/unit/SSpecActiveBoardsUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/AirportComponent/SSCarUnit/SSpecAirportUnit/SSpecAirportUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/AirportComponent/SSCarUnit/DataSource/SSpecBizDataSource+CIPCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …m/SCancelTripCom/SScarCancelTripUnit/SSpecBizDataSource+CancelTrip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCreateOrderCom/SSCarUnit/SpecUnit/SSpecBizDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCarInfoCardCom/DataSource/SSCar/SSpecBizDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …AirportComponent/SSCarUnit/DataSource/SSpecBizDataSource+GuideTool.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SEstimateCom/SSCarUnit/SSpecBizDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SEvaluateCom/SCarUnit/SSpecBizDataSource+SEvaluate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SHelpCallCarCom/Unit/SPec/SSpecBizDataSource+SHelpCallCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/DataSource/SSpecBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/BizDelegate/SSpecBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Car/SCarCommon/Pod/Classes/NextOne/Components/SCIPCom/SSpecCIPUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ancelCom/SCancelOrderCom/SSpecCancelOrderUnit/SSpecCancelOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SHelpCallCarCom/Unit/SPec/SSpecCarHelpCallCarUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SDynamicPriceCom/SSCarUnit/SSpecDynamicPriceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SEPaySelectCom/Units/SSpecEPaySelectUnit/SSpecEPaySelectUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/Components/SGuideToolCom/SSpecGuideToolUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …erationFormCom/Units/SSpecOperationFormUnit/SSpecOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SOrderActCom/SSpecOrderActUnit/SSpecOrderActUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SOrderRecoveCom/SpecFastUnit/SSpecOrderRecUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SSceneTabCom/Units/SSpecSceneTabUnit/SSpecSceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/Components/SShareCom/Units/SSpecShareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SCreateOrderCom/SSCarUnit/SpecUnit/SSpectCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SEstimateCom/SSCarUnit/SSpectEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SActiveButtonCom/unit/STaxiActiveBoardsUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SActiveButtonCom/DataSource/Taxi/STaxiBizDataSource+Activity.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CancelOrderCom/STaxiCancelOrderUnit/STaxiBizDataSource+CancelOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …m/SCancelTripCom/STaxiCancelTripUnit/STaxiBizDataSource+CancelTrip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SEstimateCom/STaxiUnit/DataSource/STaxiBizDataSource+Carpool.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SCreateOrderCom/TaxiUnit/STaxiBizDataSource+CreateElderOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SCreateOrderCom/TaxiUnit/STaxiBizDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SEstimateCom/STaxiUnit/DataSource/STaxiBizDataSource+Dispatch.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SDriverCarInfoCardCom/DataSource/STaxiBizDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/SElderCom/STaxiElderUnit/STaxiBizDataSource+ElderHome.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SEstimateCom/STaxiUnit/DataSource/STaxiBizDataSource+Estimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SHelpCallCarCom/Unit/Taxi/STaxiBizDataSource+HelpCallCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ubbleCom/STaxiServiceBubbleUnit/STaxiBizDataSource+InServiceBubble.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Com/STaxiServiceBubbleUnit/STaxiBizDataSource+InServiceElderBubble.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/SEstimateCom/STaxiUnit/DataSource/STaxiBizDataSource+OnePrice.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mCom/Units/STaxiOperationFormUnit/STaxiBizDataSource+OperationForm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Biz/STaxiBizDataSource+OrderStatus.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …shedAlertCom/TaxiPayFinishedAlertUnit/STaxiBizDataSource+PaidAlert.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SPayBillCom/DataSource/TaxiDataSource/STaxiBizDataSource+PayBill.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SPayBillCom/DataSource/TaxiDataSource/STaxiBizDataSource+PayPrice.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/PhoneProtectCom/DataSource/Taxi/STaxiBizDataSource+PhoneProtected.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …omponents/SPickBymeterCom/Unit/Taxi/STaxiBizDataSource+PickBymeter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …osMarkerCom/DataSource/TaxiDataSource/STaxiBizDataSource+PosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/SEstimateCom/STaxiUnit/DataSource/STaxiBizDataSource+PriceInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …letinBoardsCom/DataSource/STaxi/STaxiBizDataSource+SBulletinBoards.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SEvaluateCom/TaxiUnit/STaxiBizDataSource+SEvaluate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SNIMCom/DataSource/STaxiBizDataSource+SIMCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPayCom/DataSource/STaxi/STaxiBizDataSource+SPayCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SSendWordCom/STaxiSendWordUnit/STaxiBizDataSource+SendWord.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SShareJourneyCom/DataSource/STaxiBizDataSource+ShareJourney.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …othMoveCom/Units/STaxiSmoothMoveUnit/STaxiBizDataSource+SmoothMove.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/STipCom/Unit/STaxiTipFeeUnit/STaxiBizDataSource+Tip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ubbleCom/STaxiBubbleWaitResponseUnit/STaxiBizDataSource+WaitBubble.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Com/STaxiBubbleWaitResponseUnit/STaxiBizDataSource+WaitElderBubble.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Biz/STaxiBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Biz/STaxiBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …eBubbleCom/STaxiBubbleWaitResponseUnit/STaxiBubbleWaitResponseUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iz/Taxi/Services/BulletinBoards/STaxiBulletinBoardsService+Confirm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ctBiz/Taxi/Services/BulletinBoards/STaxiBulletinBoardsService+Home.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Taxi/Services/BulletinBoards/STaxiBulletinBoardsService+InService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iz/Taxi/Services/BulletinBoards/STaxiBulletinBoardsService+WaitRsp.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ProductBiz/Taxi/Services/BulletinBoards/STaxiBulletinBoardsService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ancelCom/SCancelOrderCom/STaxiCancelOrderUnit/STaxiCancelOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCancelCom/SCancelTripCom/STaxiCancelTripUnit/STaxiCancelTripUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SChooseSeatCom/STaxiChooseSeatUnit/STaxiChooseSeatUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/SCreateOrderCom/TaxiUnit/STaxiCreateOrderUnit+Confirm.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SCreateOrderCom/TaxiUnit/STaxiCreateOrderUnit+Elder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SCreateOrderCom/TaxiUnit/STaxiCreateOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SDynamicPriceCom/STaxiUnit/STaxiDynamicPriceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SElderCom/STaxiElderUnit/STaxiElderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SEstimateCom/STaxiUnit/STaxiEstimateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/Components/SEvaluateCom/TaxiUnit/STaxiEvaluateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SHelpCallCarCom/Unit/Taxi/STaxiHelpCallCarUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SHomeAwareCom/STaxiUnit/STaxiHomeAwareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SBubbleCom/STaxiServiceBubbleUnit/STaxiInServiceBubbleUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SMapBizCom/STaxiMapBizUnit/STaxiMapBizUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SMapLineCom/STaxiMapLineUnit/STaxiMapLineUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …erationFormCom/Units/STaxiOperationFormUnit/STaxiOperationFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SOrderActCom/STaxiOrderActUnit/STaxiOrderActUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/Components/SOrderRecoveCom/TaxiUnit/STaxiOrderRecUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/Components/SOrderCom/TaxiOrderUnit/STaxiOrderUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SPayBillCom/Unit/TaxiUnit/STaxiPayBillCom.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/PhoneProtectCom/Units/STaxiPhoneProtectedUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SPickBymeterCom/Unit/Taxi/STaxiPickBymeterUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SEstimateCom/STaxiUnit/DataSource/STaxiPriceInfoData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/Components/SResetPosCom/Unit/STaxi/STaxiResetPosUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SSceneTabCom/Units/STaxiSceneTabUnit/STaxiSceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SSendWordCom/STaxiSendWordUnit/STaxiSendWordUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/Components/SShareCom/Units/STaxiShareUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SSmoothMoveCom/Units/STaxiSmoothMoveUnit/STaxiSmoothMoveUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …STakeCarPlaceCom/Units/STaxiTakeCarPlaceUnit/STaxiTakeCarPlaceUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/STipCom/Unit/STaxiTipFeeUnit/STaxiTipFeeUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …elCom/SCancelOrderCom/STaxiCancelOrderUnit/STaxiWaitCountdownModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SWatchCommunicateCom/Unit/STaxiWatchCommunicateUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/Components/SWebViewCom/Units/Taxi/STaxiWebUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CancelTripCom/SScarCancelTripUnit/SUniTaxiBizDataSource+CancelTrip.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …teOrderCom/SSCarUnit/UniTaxiUnit/SUniTaxiBizDataSource+CreateOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iverCarInfoCardCom/DataSource/SUniTaxiBizDataSource+DriverInfoCard.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SEstimateCom/SSCarUnit/SUniTaxiBizDataSource+SEstimate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …DataSource/SSCarPosMarkerUnit/SUniTaxiBizDataSource+SSCarPosMarker.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/SSendWordCom/SUniTaxiSendWordUnit/SUniTaxiBizDataSource+SendWord.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/DataSource/SUniTaxiBizDataSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/BizDelegate/SUniTaxiBizDelegate.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nFormCom/Units/SUniTaxiOperationFormUnit/SUniTaxiOpertaionFormUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SSceneTabCom/Units/SUniTaxiSceneTabUnit/SUniTaxiSceneTabUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SSendWordCom/SUniTaxiSendWordUnit/SUniTaxiSendWordUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/Components/SOneCallXCom/Units/View/SXActivityInstructionView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SOneCallXCom/Units/Model/SXActivityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lTripCom/SScarCancelTripUnit/UI/ScarCancelTripReasonViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Request/ScarGetPanelConfigRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/ScarPanelConfigModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/ScarPushShareCoupon.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ar/SCarUI/SpecFastcarReservation/ScarReservationLineViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Models/ScarWidgetsConfigModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onent/SSCarUnit/View/PickAndDropViews/SpecAirportCarInfoScrollView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SCreateOrderCom/SSCarUnit/DealOrderStore/SpecDealOrderStrore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …z/SCar/SCarUI/SpecFastcarReservation/SpecFlashReservationTitleView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/Components/SOrderCom/SpecOrderComUnit/SpecOrderComUnit.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/AirportComponent/SSCarUnit/AirportSearch/TRAirPoiSearchBar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ents/AirportComponent/SSCarUnit/Model/TRAirportAccountHistoryModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/AirportComponent/SSCarUnit/Request/TRAirportAccountHistoryRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/AirportComponent/SSCarUnit/Request/TRAirportBaseRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/AirportComponent/SSCarUnit/AirportSearch/TRAirportCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/AirportComponent/SSCarUnit/Model/TRAirportCfgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/AirportComponent/SSCarUnit/Request/TRAirportCfgRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/AirportComponent/SSCarUnit/Model/TRAirportCityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/AirportComponent/SSCarUnit/Request/TRAirportCityRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/AirportComponent/SSCarUnit/Model/TRAirportCitysModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/AirportComponent/SSCarUnit/Model/TRAirportClaimsEnterModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Request/TRAirportClaimsEnterRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ViewController/PickAndDropControllers/TRAirportDropOffWebControler.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/AirportComponent/SSCarUnit/AirportSearch/TRAirportDtaSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/AirportComponent/SSCarUnit/Request/TRAirportEntrenceReportRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ortComponent/SSCarUnit/AirportSearch/TRAirportHistoryFlightNumCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/AirportComponent/SSCarUnit/Model/TRAirportInsureStatusModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/AirportComponent/SSCarUnit/Request/TRAirportInsureStatusRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ts/AirportComponent/SSCarUnit/Request/TRAirportInsureSubmitRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Component/SSCarUnit/AirportSearch/TRAirportPoiSearchViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/AirportComponent/SSCarUnit/Request/TRAirportRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/AirportComponent/SSCarUnit/Model/TRAirportsModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRAuthNickGuideModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Models/TRAuthorizedNicknameModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Request/TRAuthorizedNicknameRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/AirportComponent/SSCarUnit/Model/TRBaseCityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …elTripCom/SScarCancelTripUnit/UI/TRCancelJourneyRuleViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/Components/SPackCarCom/SSCarUnit/Cell/TRCarTypeView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Models/TRCheckEnterpriseUserModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/AirportComponent/SSCarUnit/AirportSearch/TRCityTableViewCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRCommentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRConsultInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRCouponConfirmModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/AirportComponent/SSCarUnit/Service/TRDropOffAuxiliary.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TREstiPriceTagModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SPackCarCom/SSCarUnit/Cell/TREstimateCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Models/TREstimateFeeDataModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRFastCarGuideModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRFeeDetailActivityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRFeeInfoItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRFirstWanliuMsgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ortComponent/SSCarUnit/AirportSearch/TRFlightAirportViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/AirportComponent/SSCarUnit/Model/TRFlightInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/AirportComponent/SSCarUnit/Request/TRFlightInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/AirportComponent/SSCarUnit/Model/TRFlightInfosModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/AirportComponent/SSCarUnit/AirportSearch/TRFlightNumDateSource.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/Components/AirportComponent/SSCarUnit/Service/TRFlightRecordList.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Request/TRGetOrderFlightRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRGetOrderPayResultModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRGetWanliuInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Request/TRGetWanliuInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/SCar/Models/LikeWaitModel/TRLikeWaitOrderModelData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRLineupInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SPackCarCom/SSCarUnit/Cell/TRMultiBtnOperationCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SPackCarCom/SSCarUnit/Cell/TRMultiOperationCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/SCar/WebSupport/TRNewBaoXiaoViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/SCar/WebSupport/TRNewHomeEstimatePriceDetailVC.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/Components/SPackCarCom/SSCarUnit/Cell/TROperationCellCar.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/Components/SPackCarCom/SSCarUnit/Model/TROperationCellCarModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SPackCarCom/SSCarUnit/Cell/TROperationCellFlightTime.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SPackCarCom/SSCarUnit/Model/TROperationCellFlightTimeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/SPackCarCom/SSCarUnit/Model/TROperationTipAndBusinessCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRPassengerConfigInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRPassengerCountModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRPathShareModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Request/TRPathShareRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRPaymentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRRefundInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …irportComponent/SSCarUnit/AirportSearch/TRResultsAirportController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRRewardModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Request/TRRewardRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …portComponent/SSCarUnit/AirportSearch/TRSelectCityHeaderFooterView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …rCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRSendWordModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SPackCarCom/SSCarUnit/Cell/TRSpecCarTypeCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/Components/SPackCarCom/SSCarUnit/Model/TRSpecCarTypeCellModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/SCar/Models/TRStationInfoModel/TRStationInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ProductBiz/SCar/Models/TRStationInfoModel/TRStationStatusInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Request/TRWLAgentRemindRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/AirportComponent/SSCarUnit/Model/TRWLAirportCarLevelModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Request/TRWLCallServiceLogRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWLCheckboxInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWLEnterpriceData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWLEnterpricePayment.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …NextOne/Components/SBubbleCom/SSCarInServiceBubbleUnit/TRWLFeeCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SPackCarCom/SSCarUnit/Service/TRWLGetCarTypeCouponReqModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Request/TRWLGetCommentTagRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWLLinkModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWLLocationModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/AirportComponent/SSCarUnit/Model/TRWLOrderFlightCardModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/SCar/Models/TRWLOrderStatusCarpoolMsgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/SCar/WebSupport/TRWLValuationRuleController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SEvaluateCom/SCarUnit/SCommentModel/TRWanLiuCommentTagModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Models/TRWanLiuDynamicPriceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/SCar/Request/TRWanLiuGetOrderDetailRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/SCar/Models/Payment/TRWanLiuPrePayModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanLiuTotalFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuCancelOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ncelTripCom/SScarCancelTripUnit/Request/TRWanliuCancelOrderRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ancelTripCom/SScarCancelTripUnit/Request/TRWanliuCancelTripRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuCarTypeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SPackCarCom/SSCarUnit/Service/TRWanliuComboInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/Components/SPackCarCom/SSCarUnit/Model/TRWanliuComboModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Components/SEvaluateCom/SCarUnit/SCommentModel/TRWanliuCommentMark.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SEvaluateCom/SCarUnit/SCommentModel/TRWanliuCommentRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuDriverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuDriverPosModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuEnsureModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuEnsureRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuEstimatePriceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SCarCommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuFee.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuFriendsModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tMapBizUnit/SCarpoolRouteLogic/Model/TRWanliuGetCarPoolDetailModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/SCar/Request/TRWanliuGetCarPoolDetailRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …AirportComponent/SSCarUnit/Request/TRWanliuGetCarTypeCouponRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuGetFeeDetailModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Request/TRWanliuGetFeeDetailRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuGetFlagRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/SCar/Request/TRWanliuGetOrderStatusRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuGetPayInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuGetPayInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/SCar/Request/TRWanliuGetStationStatusRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …apBizCom/SFastMapBizUnit/SCarpoolRouteLogic/Model/TRWanliuLineData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuLogCollectionReq.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/SCar/Models/TRWanliuOrderDetailCommentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/SCar/Models/TRWanliuOrderDetailFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuOrderDetailModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/SCar/Models/TRWanliuOrderDetailOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuOrderStatusModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/SCar/Models/TRWanliuOrderStatusSpareModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SPackCarCom/SSCarUnit/Service/TRWanliuPackCarCityListRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuPrePayRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuPushBeginCharge.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuPushFinishOrder.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuQuestionModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/SCar/Request/TRWanliuQuestionNaireRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuRealTimeFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuRealTimeOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/SCar/Request/TRWanliuSnsConfigRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/SCar/Models/TRWanliuUpdateOrderInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/SCar/Request/TRWanliuUpdateOrderInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWanliuWxAgentMsgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/SCar/Models/TRWxagentPayInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Common/Apollo/TaxiAPOExperiment.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiAdOperationModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiAdOperationRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Services/AdOperation/TaxiAdOperationService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/Order/TaxiAdditionalModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Taxi/Common/AlertViewManager/TaxiAlertManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Common/Apollo/TaxiApolloInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Common/Apollo/TaxiApolloManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Model/TaxiBaseModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiBasePriceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Network/Base/TaxiBaseRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Common/View/TaxiBaseWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCancelInfoDetailModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCancelInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiCancelOrderRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/ProductBiz/Taxi/Services/OrderClose/TaxiCancelOrderViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCarpoolInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nents/SCreateOrderCom/TaxiUnit/View/TaxiCarpoolOnePriceWarningView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCarpoolPriceInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiChangePriceRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCheckRiskUserModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Taxi/Network/Request/TaxiCheckRiskUserRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCommentDriverItemModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCommentModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Network/Request/TaxiCommentRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiCommonDefine.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiCommonInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiContactsModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Taxi/Network/Request/TaxiContactsRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiCreateOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiCreateOrderRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SPayFinishedAlertCom/TaxiPayFinishedAlertUnit/TaxiCustomAlertModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiDCQModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Car/SCarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Services/Discovery/TaxiDiscoveryService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiDraftStoreInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Model/Socket/TaxiDriverCancelOrderModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/Socket/TaxiDriverPayItem.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/Socket/TaxiDriverPayModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …xtOne/ProductBiz/Taxi/Model/Socket/TaxiDriverPosModel+NearDistance.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiDriverPosModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Taxi/Model/Socket/TaxiDriverPositionInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Network/Request/TaxiDynamicBtnRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SDynamicPriceCom/STaxiUnit/View/TaxiDynamicPriceConfirmView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiDynamicReasonModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SCreateOrderCom/TaxiUnit/View/TaxiElderSendOrderConfirmView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiEnterprisePayInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiExtraFeeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Common/View/TaxiFullScreenWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Network/Request/TaxiGenPayParamsRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Network/Request/TaxiGetExtraInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Taxi/Network/Request/TaxiGetOrderStatusRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Network/Request/TaxiGetPayInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …s/NextOne/ProductBiz/Taxi/Network/Request/TaxiGetPrePayInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiGetShareUrlModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiGetShareUrlRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Network/Request/TaxiGoingCancelJuageRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiGoingCancelJudgeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Taxi/Model/Module/HelpCalCar/TaxiGoingPageEtaModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiHUDHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …onents/SCreateOrderCom/TaxiUnit/View/TaxiHelpToCallAlertCustomView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiHelpToCallModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SHelpCallCarCom/Unit/Taxi/View/TaxiHelpToCallShareView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Services/HTTPS/TaxiHttpsManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiIMSessionModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …arCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Utils/Image/TaxiImage.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Taxi/Common/LocalNotification/TaxiLocalNotification.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiLocationService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiMapUtils.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …roductBiz/Taxi/Services/Mileage/TaxiMileageDetailWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Taxi/Services/Mileage/TaxiMileageManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Network/Base/TaxiNetworkHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Components/SPayBillCom/Unit/TaxiUnit/TaxiNewBaoXiaoViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …tOne/ProductBiz/Taxi/Services/NewUserGuide/TaxiNewUserGuideService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Common/Omega/TaxiOMGAnalytics.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOnePriceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOnePriceSectionModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …nts/SCreateOrderCom/TaxiUnit/View/TaxiOnePriceSendOrderConfirmView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Network/Request/TaxiOnlineLogRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ProductBiz/Taxi/Services/OrderClose/TaxiOrderCancelRobbedAlertView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Services/OrderClose/TaxiOrderCancelTool.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …TaxiCancelOrderUnit/TaxiProgressView/TaxiOrderCancelUnrobAlertView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/Taxi/Model/Order/TaxiOrderData.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOrderDetailModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Network/Request/TaxiOrderDetailRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Taxi/Model/Socket/TaxiOrderEventModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOrderInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Taxi/Services/OrderList/TaxiOrderListViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Services/Order/TaxiOrderManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/ProductBiz/Taxi/Model/Module/OrderRecovery/TaxiOrderRecoverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …iz/Taxi/Model/Module/OrderRecovery/TaxiOrderRecoveryAlertInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Taxi/Services/OrderRecovery/TaxiOrderRecoveryService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Model/Socket/TaxiOrderRemindModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ses/NextOne/ProductBiz/Taxi/Model/Module/Share/TaxiOrderShareModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOrderStatusBaseModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiOrderStatusModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …CarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Store/TaxiOrderStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Taxi/Services/OrderList/TaxiOrderTabelViewCell.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/Order/TaxiOrderTimeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Model/Module/OrderTrace/TaxiOrderTraceModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …e/ProductBiz/Taxi/Services/OrderTraceService/TaxiOrderTraceService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Network/Socket/TaxiPDRelationship.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Taxi/Model/Socket/TaxiPassengerChargeItemModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Model/Socket/TaxiPassengerChargeModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/Pay/TaxiPayConfigModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayParamModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayPlatformModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayResultModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Network/Request/TaxiPayResultRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPayTipModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Services/Payment/TaxiPaymentHelper.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Services/Payment/TaxiPaymentInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/NextOne/ProductBiz/Taxi/Services/Payment/TaxiPaymentStore+PayBill.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Services/Payment/TaxiPaymentStore+payResult.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Services/Payment/TaxiPaymentStore.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPreTipModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPrepayInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiPriceInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Network/Request/TaxiPriceInfoRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ponents/SEstimateCom/STaxiUnit/View/TaxiPriceInfoWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/Components/SDynamicPriceCom/STaxiUnit/View/TaxiPriceWarningView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/SDynamicPriceCom/STaxiUnit/View/TaxiPriceWarningViewCallBackModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mponents/SDynamicPriceCom/STaxiUnit/View/TaxiPriceWarningViewModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiQuickPaySignTxtInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Model/Order/TaxiRemarkAdditionInfo.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiRewardDriverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Services/RiskUser/TaxiRiskUserManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …SCreateOrderCom/TaxiUnit/View/TaxiRiskUserWarningWebViewController.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …r/SCarCommon/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiRouter.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …on/Pod/Classes/NextOne/ProductBiz/Taxi/Model/TaxiSceneDynamicModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …n/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiSdkParamModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Network/Request/TaxiSetCarpoolStatusRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiSingleContactModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Classes/NextOne/ProductBiz/Taxi/Model/Socket/TaxiSmoothPointModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiSnsConfigModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …asses/NextOne/ProductBiz/Taxi/Network/Request/TaxiSnsConfigRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Network/Socket/TaxiSocketInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Taxi/Network/Socket/TaxiSocketMsgProcessor.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Taxi/Network/Socket/TaxiSocketService.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/Taxi/Common/TaxiSoundManager.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …d/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiStatusDriverModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …es/NextOne/Components/SHelpCallCarCom/Unit/Taxi/View/TaxiTextField.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiTrainIntroModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Pod/Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiTravelRoadModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Taxi/Services/OrderList/Model/TaxiUnpayListOrderMsg.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ne/ProductBiz/Taxi/Network/Request/TaxiUpdatePDRelationshipRequest.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Classes/NextOne/ProductBiz/Taxi/Model/HTTP/TaxiUserCreditInfoModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Taxi/Services/OrderList/TaxiWarningContainerView.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/Components/SWatchCommunicateCom/Unit/TaxiWatchDataInterface.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …sses/NextOne/ProductBiz/Driver/SDK/General/Category/UIDevice+DJExt.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …One/ProductBiz/Taxi/Services/OneServerImage/UIImage+OneServerImage.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …extOne/ProductBiz/Sofa/SofaPlugin/SofaUtils/UIImage+SSofaExtension.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …river/Utils/SDDJGestureRecognizerKit/UISwipeGestureRecognizer+SDDJ.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Driver/Utils/SDDJGestureRecognizerKit/UITapGestureRecognizer+SDDJ.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …lasses/NextOne/ProductBiz/Taxi/Utils/Category/UIView+AnimationHelp.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Driver/Utils/SDDJGestureRecognizerKit/UIView+SDDJGestureRecognizer.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …/Pod/Classes/NextOne/ProductBiz/SCar/Models/WLChgDispthResultModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …Common/Pod/Classes/NextOne/ProductBiz/SCar/Models/WLCommonMsgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …od/Classes/NextOne/ProductBiz/SCar/Models/WLOperationActivityModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mon/Pod/Classes/NextOne/ProductBiz/SCar/Models/WLOrderPaySuccModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …mmon/Pod/Classes/NextOne/ProductBiz/SCar/Models/WLOrderStatusModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.

         …ommon/Pod/Classes/NextOne/ProductBiz/SCar/Models/WLUpGradeMsgModel.m 
         The following warning flags are not enabled:
         
         • -Wall — Enables all warnings that have a high confidence value and
           low rate of false positives.
          • -Wconversion — Warns about implicit conversions that may alter a
            value. This is a group flag that encompasses many other similar
            warnings (for example, -Wenum-conversion, -Wsign-conversion,
            -Wint-conversion, -Wbool-conversion …) The “Suspicious Implicit
            Conversions” (CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION) Xcode
            setting controls this.
          • -Wdeprecated-implementations — Warns if deprecated Objective-C
            methods are being overridden. The “Overriding Deprecated
            Objective-C Methods” (CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS)
            Xcode setting controls this.
          • -Wempty-body — Warns if an empty body occurs in an 'if', 'else' or
            'do while' statement. The “Empty Loop Bodies”
            (CLANG_WARN_EMPTY_BODY) Xcode setting controls this.
          • -Werror — Treats warnings as errors. Recommended so that warnings
            could not be ignored out of habit (warnings that are intentionally
            ignored should then be ignored explicitly by adding a
            '-Wno-<warning-name>' compiler flag). The “Treat Warnings as
            Errors” (GCC_TREAT_WARNINGS_AS_ERRORS) Xcode setting controls
            this.
          • -Wextra — Enables additional warnings that are useful but
            may have higher false positive rates or common philosophical
            objections.
          • -Wfloat-equal — Warns if floating-point values are used in
            equality comparisons.
          • -Wimplicit-retain-self — Warns if 'self' is being implicitly
            retained by a block. The “Implicit retain of 'self' within blocks”
            (CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF) Xcode setting controls
            this.
          • -Wnewline-eof — Warns if a file does not end in a newline
            character. The “Missing Newline at End of File”
            (GCC_WARN_ABOUT_MISSING_NEWLINE) Xcode setting controls this.
          • -Wreturn-type — Warns whenever a function is defined with a return
            type that defaults to int. Also warns about any return statement
            with no return value in a function whose return type is not void
            (falling off the end of the function body is considered returning
            without a value), and about a return statement with an expression
            in a function whose return type is void. The “Mismatched Return
            Type” (GCC_WARN_ABOUT_RETURN_TYPE) Xcode setting controls this.
          • -Wshadow — Warns whenever a local variable or type declaration
            shadows another variable, parameter, type, or class member (in
            C++), or whenever a built-in function is shadowed. The “Hidden
            local variables” (GCC_WARN_SHADOW) Xcode setting controls this.
          • -Wsign-compare — Warns when a comparison between signed and
            unsigned values could produce an incorrect result when the signed
            value is converted to unsigned. The “Sign Comparison”
            (GCC_WARN_SIGN_COMPARE) Xcode setting controls this.
          • -Wundef — Warns if an undefined identifier is evaluated in an
            '#if' directive.



                 ~~~~~~~~~~~~
